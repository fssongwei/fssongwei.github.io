<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David&#39;s Blog</title>
  
  <subtitle>Eat, Sleep, Code, Repeat</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.david916.com/"/>
  <updated>2021-02-20T02:37:43.394Z</updated>
  <id>http://blog.david916.com/</id>
  
  <author>
    <name>Wei Song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>innerHTML, innerText和textContent比较</title>
    <link href="http://blog.david916.com/2021/02/20/innerHTML&amp;innerText&amp;textContainer/"/>
    <id>http://blog.david916.com/2021/02/20/innerHTML&amp;innerText&amp;textContainer/</id>
    <published>2021-02-20T02:34:59.211Z</published>
    <updated>2021-02-20T02:37:43.394Z</updated>
    
    <content type="html"><![CDATA[<p>jsp嵌入的md文本是经过html encode的，因此md文本内的html标签不会被解析</p><p>以下一段在div内的md文本（HTML encoded）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"># h1 title</span><br><span class="line">## h2 title</span><br><span class="line">### h3 title</span><br><span class="line"></span><br><span class="line">&amp;lt;code&amp;gt;</span><br><span class="line">      console.log("Hello World!");</span><br><span class="line">&amp;lt;/code&amp;gt;</span><br><span class="line"></span><br><span class="line">- ![image](https://some_image_url)</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中，内部的<code>&lt;code&gt;</code>标签不会被解析，同时不保留换行符：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/02/20/KpwqVQIRogaF1Pk.png" alt="browser.png" title>                </div>                <div class="image-caption">browser.png</div>            </figure><p>分别使用innerHTML，innerText和textContent提取id为container的div元素内部的md文本</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2021/02/20/duoOE1hsnYJtka9.png" alt="compare.png" title>                </div>                <div class="image-caption">compare.png</div>            </figure><ol><li>innerHTML提取的文本保留换行和转义字符</li><li>innerText提取的文本不保留换行，且进行了html decode</li><li>textContent提取的文本保留换行，且进行了html decode</li></ol><p>根据具体业务场景进行选择（当前选择3）</p><p>补充：</p><ol><li><p>innerText是IE遗留属性，不建议使用</p></li><li><p>innerText和textContent都会将文本进行decode，因此可以用于解码：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlDecode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">  temp.innerHTML = text;</span><br><span class="line">  <span class="keyword">var</span> output = temp.innerText || temp.textContent;</span><br><span class="line">  temp = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jsp嵌入的md文本是经过html encode的，因此md文本内的html标签不会被解析&lt;/p&gt;
&lt;p&gt;以下一段在div内的md文本（HTML encoded）&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.david916.com/categories/Note/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Image图床App</title>
    <link href="http://blog.david916.com/2021/02/08/ImageApp/"/>
    <id>http://blog.david916.com/2021/02/08/ImageApp/</id>
    <published>2021-02-08T09:30:02.010Z</published>
    <updated>2021-02-08T09:35:35.216Z</updated>
    
    <content type="html"><![CDATA[<p>一个图床app，前端用vue编写，后端通过multer存储图片</p><p>主要是想学一下vue，没写样式，界面有点丑，后续改进</p><p><a href="https://image.wei.ai" target="_blank" rel="noopener">Demo</a></p><p><a href="https://github.com/fssongwei/image" target="_blank" rel="noopener">Front-end</a></p><p><a href="https://github.com/fssongwei/Image-API" target="_blank" rel="noopener">Back-end</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://medium.com/binarcode/deploying-vue-apps-to-heroku-the-right-way-26b11c1ae5cd" target="_blank" rel="noopener">Deploying Vue on Heroku</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个图床app，前端用vue编写，后端通过multer存储图片&lt;/p&gt;
&lt;p&gt;主要是想学一下vue，没写样式，界面有点丑，后续改进&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://image.wei.ai&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;De
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Express" scheme="http://blog.david916.com/tags/Express/"/>
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="Vue" scheme="http://blog.david916.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Flashcard - A Note App with Markdown Editor Built-in</title>
    <link href="http://blog.david916.com/2020/12/30/Flashcard/"/>
    <id>http://blog.david916.com/2020/12/30/Flashcard/</id>
    <published>2020-12-30T13:04:50.563Z</published>
    <updated>2020-12-30T13:21:09.635Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>Flashcard is a note app that comes with both web version and mobile version (iOS and Android). The web version is built on React and the mobile version is built on React Native. Other libraries and tools involve are Redux and Ant Design (Front end) and Express &amp; MongoDb (Back-end). The app implemented the following features:</p><ol><li><p>Implemented Google and Facebook OAuth 2.0 login.</p></li><li><p>User can create note (which we call it as “flashcard”) using built-in markdown editor.</p></li><li><p>The flashcards are sorted with categories and tags.</p></li><li><p>User can choose to review a series of flashcards base on either a random selection, or give priority to the flashcards that have been a long time since the last review time</p></li></ol><p><a href="https://flashcard.wei.ai" target="_blank" rel="noopener">Demo</a></p><p><a href="https://github.com/fssongwei/flashcard" target="_blank" rel="noopener">Source Code - Front-end</a></p><p><a href="https://github.com/fssongwei/flashcard-api" target="_blank" rel="noopener">Source Code - Back-end</a></p><p><a href="https://github.com/fssongwei/flashcard-native" target="_blank" rel="noopener">Source Code - Native</a></p><h3 id="Final-Product"><a href="#Final-Product" class="headerlink" title="Final Product"></a>Final Product</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/12/30/uIZGcrf57jAiUJe.png" alt="Index.png" title>                </div>                <div class="image-caption">Index.png</div>            </figure><p><img src="https://i.loli.net/2020/12/30/f6iPsWve9mQ3J4z.png" alt="Flashcard.png"></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/12/30/2Ig918eB4DMATzp.png" alt="Editor.png" title>                </div>                <div class="image-caption">Editor.png</div>            </figure><img src="https://i.loli.net/2020/12/30/156U7mgwLESQexv.png" alt="Index-Native.png" style="zoom: 25%;"><img src="https://i.loli.net/2020/12/30/v6HTFxn5jlZYJBE.png" alt="CardList-Native.png" style="zoom: 25%;"><img src="https://i.loli.net/2020/12/30/pZJCA2kmSev8TMD.png" alt="Card-Native.png" style="zoom:25%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;Flashcard is a note app that c
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
      <category term="ReactNative" scheme="http://blog.david916.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>Virtual DOM和Diff算法总结</title>
    <link href="http://blog.david916.com/2020/12/24/Virtual%20DOM%E5%92%8CDiff%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.david916.com/2020/12/24/Virtual DOM和Diff算法总结/</id>
    <published>2020-12-24T10:11:26.960Z</published>
    <updated>2020-12-24T10:13:14.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h3><img src="https://lsqimg-1257917459.cos-website.ap-beijing.myqcloud.com/blog/虚拟dom.png" alt="Virtual DOM" style="zoom:50%;"><p>App（JS程序）可以通过DOM操作创建或更改DOM元素，DOM元素也可以通过监听并触发事件来影响JS</p><p>然而对于对于用js写的每个组件，我们需要自行<strong>手动</strong>去完成DOM更新和事件处理，效率低下</p><p>（e.g. 我用js写了一个复杂的大组件，现在想改其中一个小部分（子组件），我可以：1. 直接覆盖DOM树上整个大组件的节点，不需要引入额外代码，但DOM操作复杂性能低，或2. 通过一系列DOM查找，找到要修改的子组件所在的DOM节点，然后覆盖这个小节点，但是需要手动引入大量额外操作或代码）</p><p>React为解决上述问题引入了Virtual Dom：</p><ol><li>js创建组件后通过<code>React.createElement</code>函数生成虚拟DOM树，然后通过Virtual DOM来创建或更改真实的DOM树</li><li>DOM触发的事件会先冒泡至Virtual DOM，再由Virtual DOM转发到具体的js组件或函数去处理事件</li></ol><h4 id="Virtual-Dom优势"><a href="#Virtual-Dom优势" class="headerlink" title="Virtual Dom优势"></a>Virtual Dom优势</h4><ol><li><p>我们只需建立js组件并维护其状态，Virtual DOM会自动完成DOM更新和事件处理，从而<strong>提升开发效率</strong></p></li><li><p>Virtual DOM通过<strong>Diff算法</strong>来比较新旧Virtual DOM树，从而得出最高效的DOM更新和操作步骤，因而<strong>提升性能</strong></p><p>（实际上Virtual DOM最终还是要进行实际的DOM操作，因而不会直接提升DOM操作的性能）</p></li><li><p>不同平台可以根据Virtual DOM画出对应平台的UI层（e.g. react-native），从而实现了<strong>跨平台能力</strong></p></li></ol><h4 id="Virtual-DOM节点对象属性"><a href="#Virtual-DOM节点对象属性" class="headerlink" title="Virtual DOM节点对象属性"></a>Virtual DOM节点对象属性</h4><ol><li>type：组件类型：原生HTML元素（div, span）/ Function Component / Class Component</li><li>key：组件的唯一标识（用于Diff算法）</li><li>ref：指向原生的DOM节点</li><li>props：传入组件的props（注意children也是props的一个属性，即子组件由此访问）</li><li>owner：父组件的Virtual DOM节点</li></ol><h4 id="Virtual-DOM事件处理"><a href="#Virtual-DOM事件处理" class="headerlink" title="Virtual DOM事件处理"></a>Virtual DOM事件处理</h4><ol><li><p>react所有组件的事件（非原生事件，以下称react事件）都是挂载在document上</p></li><li><p>直到事件触发后冒泡至document后，react才开始执行react事件</p></li><li><p>执行顺序：非挂载在document上的原生事件 =&gt; react事件 =&gt; 挂载在document上的原生事件</p><p>（不建议混用react事件和原生事件） <a href="https://juejin.cn/post/6844903790198571021#heading-4" target="_blank" rel="noopener">ref</a></p></li></ol><h3 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h3><p>归纳三点（如果不想看后续详细介绍）：</p><ol><li>同级节点（具有相同父节点的子节点）为一组进行比较（tree diff）</li><li>节点间通过比较节点类型进行快速判断（component diff）</li><li>使用key对于同组节点进行比较和移动操作，避免重复删除和重建节点（element diff）</li></ol><p>Virtual DOM带来的性能提升主要源于React实现的高效Diff算法。Diff算法主要用于计算从一颗树变换到另一个树所需要的最少操作次数（添加/删除/移动节点）。</p><p>传统Diff算法平均复杂度为n^3，react引入的改进版Diff算法平均复杂度降至n</p><p>用户触发的事件均可能造成DOM树的变动，主要分为以下几种：</p><ol><li>同一层级（具有相同父节点的兄弟节点）的DOM节点之间的变动：e.g. 新增/插入/删除/随机排序列表项</li><li>一个DOM节点影响另一个DOM节点（例如redux状态共享，父子节点通过props/callback状态共享）</li><li>DOM节点间的跨层级移动（例如同级的AB节点，A节点移动至B的子节点）（此种情况出现次数极少，忽略不计）</li></ol><p>基于上述变动方式，React设计了如下步骤用于计算如何变换DOM树：</p><ol><li><p>tree diff</p><p>由于DOM节点间的跨层级移动出现极少，因此可以完全忽略此种情况，比较两颗树时只对同一层次对应的节点进行比较</p><p><img src="https://pic1.zhimg.com/80/0c08dbb6b1e0745780de4d208ad51d34_720w.png" alt="tree diff"></p><p>（如上图：根节点和根节点比较，同一层次具有相同父节点的节点为一组进行比较）</p><p><img src="https://pic2.zhimg.com/80/d712a73769688afe1ef1a055391d99ed_720w.png" alt="tree diff 2"></p><p>而对于跨层级移动的节点（上图A），则会经历一次节点销毁和节点重建的过程，效率较低。但由于此种情况出现极少，整体而言react diff算法效率还是较高</p></li><li><p>component diff</p><p>上面tree diff进行同级比较时，需要判断两个节点是否相同，如果不同则会被替换或销毁</p><p>react判断节点（以及其子节点）是否相同，不会通过递归的方式一一比较子节点，而是直接通过判断两个节点的类型（class，即组件名）是否相同，对于不同的节点进行操作</p><p>（react官方的解答是，对于不同类型的组件节点，存在相同DOM树的概率极低，因而不用浪费时间在后续比较）</p><p>对于类型相同的节点，则继续递归其子节点进行判断，但是react也允许用户使用<code>shouldComponentUpdate()</code> 来判断是否需要对该节点进行后续<code>diff</code>运算，从而提高效率</p></li><li><p>element diff</p><p>对于同一层级（具有相同父节点的）节点的新增/插入/删除/乱序等操作，传统的diff算法会按顺序一一通过component diff进行比较，对不同的节点进行删除/重建/替换操作，效率较低：</p><p><img src="https://pic2.zhimg.com/80/7541670c089b84c59b84e9438e92a8e9_720w.png" alt="element diff 1"></p><p>(e.g. 当上面节点顺序由ABCD改为BADC时，传统Diff算法流程：删除A，重建B，插入B，删除B，重建A，插入A，删除C，重建D，插入D，删除D，重建C，插入C共12步，即每个节点都需要删除再重建，尤其重建的效率非常低)</p><p>实际上针对上述情况，只需要进行两部移动（将A移动到B后面，将D移动到C后面）即可完成，这也是react element diff算法给出的操作结果：</p><ol><li><p>每个同级节点具有独特的key</p></li><li><p>遍历每个新Virtual DOM的节点（索引记为i），如果旧Virtual DOM树同一层级具有相同的节点（需要结合key和component diff判断是否相同），且该节点当前所在索引 i 在其旧索引位置的前面，则将该节点从真实DOM树上<strong>往后移动</strong></p><p>（即仅对存在的节点向后移动，而不对节点向前移动）</p><p>（e.g. 上面A节点在新树的索引为1，旧树的索引为0，则将A在DOM树上往后移）</p><p>对于不存在于旧DOM的新节点则直接插入到DOM树中，对于不存在于新DOM的旧节点则直接删除</p></li></ol><p>Example:</p><p><img src="https://pic4.zhimg.com/80/c0aa97d996de5e7f1069e97ca3accfeb_720w.png" alt="example1"></p><p>(ABCD节点均在旧DOM树中，b节点新旧索引（0&lt;1）不动，a节点（1&gt;0）往后移动，依次类推)</p><p><img src="https://pic1.zhimg.com/80/7b9beae0cf0a5bc8c2e82d00c43d1c90_720w.png" alt="example2"></p><p>(B节点不动，E节点新增，C节点不冬，A节点后移，D节点删除)</p><p><img src="https://pic2.zhimg.com/80/1b8dac5b9b3e4452dec8d5447d7717ad_720w.png" alt="example3"></p><p>（ABC节点均后移，D节点不动。由于Diff算法只对节点进行后移，因此尽量减少类似将最后一个节点移动到列表首部的操作）</p></li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.conardli.top/blog/article/React深入系列/深入分析虚拟DOM的渲染原理和特性.html" target="_blank" rel="noopener">深入分析虚拟DOM的渲染原理和特性</a></p><p><a href="https://zhuanlan.zhihu.com/p/20346379" target="_blank" rel="noopener">React 源码剖析系列 － 不可思议的 react diff</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Virtual-DOM&quot;&gt;&lt;a href=&quot;#Virtual-DOM&quot; class=&quot;headerlink&quot; title=&quot;Virtual DOM&quot;&gt;&lt;/a&gt;Virtual DOM&lt;/h3&gt;&lt;img src=&quot;https://lsqimg-1257917459.c
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.david916.com/categories/Note/"/>
    
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 安全性总结</title>
    <link href="http://blog.david916.com/2020/12/24/OAuth%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.david916.com/2020/12/24/OAuth安全问题/</id>
    <published>2020-12-24T06:20:00.879Z</published>
    <updated>2020-12-24T06:25:08.252Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一篇关于使用Passport.js实现Google OAuth2.0登录的流程（<a href="https://blog.wei.ai/2020/08/21/使用Passport.js实现Google%20OAuth登录/" target="_blank" rel="noopener">ref</a>），然后自己也写了一个基于OAuth的SSO单点登录模块（<a href="https://blog.wei.ai/2020/12/17/David-Auth%20Spec/" target="_blank" rel="noopener">ref</a>）集成到了自己的几个项目中。最近面试几个大厂都问道了有关OAuth的问题，发现对OAuth一些原理性和安全性的问题还是理解的不是很透彻，在这里继续总结一下：</p><h3 id="什么是OAuth"><a href="#什么是OAuth" class="headerlink" title="什么是OAuth"></a>什么是OAuth</h3><p>OAuth是一种第三方授权协议，委托第三方（e.g. Google，Facebook，Wechat）等对用户进行鉴权，鉴权成功后向应用发送一个信任凭证（即token）。应用可以凭借token去向第三方获取该用户授权开放的身份信息（用户名，邮箱，头像等）。</p><p>OAuth授权只是允许app从第三方处获取部分用户数据等信息，如要实现本地登录等功能，仍然需要app自行将用户信息注册到数据库，并通过session-cookie或JWT登录等方式实现</p><h3 id="OAuth-2-0-流程"><a href="#OAuth-2-0-流程" class="headerlink" title="OAuth 2.0 流程"></a>OAuth 2.0 流程</h3><p>（以下仅展示授权码模式，即Authorization Code）</p><p>简化流程：</p><ol><li>先向google设置redirect_uri名单，并获取appid和secret</li><li>用户发起登录请求，后端将请求重定向到google认证服务器，并附带client_id和redirect_uri</li><li>用户完成google登录，google认证服务器检查redirect_uri是否在名单内，然后重定向至此uri（应用后端）并附带code</li><li>应用后端收到code，使用code, appid和secret向google认证服务器换取token</li><li>后端使用token向google获取用户数据信息，并以此实现自己的注册和登录流程（session-cookie等）</li></ol><h3 id="OAuth解决了哪些安全性问题"><a href="#OAuth解决了哪些安全性问题" class="headerlink" title="OAuth解决了哪些安全性问题"></a>OAuth解决了哪些安全性问题</h3><ol><li><p>为什么使用token而不是将google的账号+密码发送该应用，然后应用通过账号+密码从google获取用户数据</p><p>（即为什么要使用OAuth+Token的形式做第三方授权）</p><ol><li><p>使用账户+密码的缺点（账户泄露、访问权限控制）</p><ul><li>账户密码可能会被不法应用泄露，或者任意一个应用被破解造成泄露</li><li>一个应用可以拥有完整的google账户访问权限，用户无法做出相应限制</li></ul></li><li><p>OAuth + token如何解决上述问题</p><p>如果把账号+密码当做一把永久钥匙，而token则为一把临时钥匙</p><ul><li>Token具有一定的时效，且可以随时由google设置为失效</li><li>可以通过设置scope限制每把token可以获取的用户数据范围</li></ul></li></ol></li><li><p>google为什么要验证回调uri</p><p>OAuth2.0流程第2步重定向至google服务器的过程中，client_id和redirect_uri是可以直接被明文访问到的</p><p>因此攻击者可以以此构建自己的重定向连接，并把redirect_uri替换为自己的服务器后端</p><p>这样当用户完成登录后，假设google不验证redirect_uri是否合法，将直接把code发送给攻击者的后端</p><p>（虽然攻击者即使有了code，如果没有serect仍然无法获取到token，但这相当于多了一道保护屏障）</p></li><li><p>为什么要使用code和secret换token，而不是登录后google直接返回token</p><p>google返回数据（无论是code还是token）的过程中，可能存在以下几种方式使得code或者token泄露：</p><ol><li>google重定向的uri不支持https，则token或code会暴露在从google到应用后端之间途径线路上的所有路由器</li><li>假设后端DNS被污染，token或code会直接被发送到攻击者的服务器</li></ol><p>因此在返回凭据的过程中，使用code和secret作为两道屏障去换取token：</p><ol><li><p>google先向app后端返回code而非token（code可能会因为上述两种方式造成泄露）：</p><p>code只能使用一次，使用第二次时，先前换取的token会自动失效。因此就算攻击者使用code（和通过不知道什么手段获取到的secret）换到了token，当app后端收到code去第二次获取token时，整个code和token都会失效</p></li><li><p>secret只能部署给信任的服务器，服务器以此证明自己是合法的，从而换取token</p></li></ol><p>总结：只返回code，再用code+secret换token，code在重定向的过程中即使泄露，没有secret也无法换取token；即使有了secret，如果使用两次code后token也会自动失效</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前写过一篇关于使用Passport.js实现Google OAuth2.0登录的流程（&lt;a href=&quot;https://blog.wei.ai/2020/08/21/使用Passport.js实现Google%20OAuth登录/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.david916.com/categories/Note/"/>
    
    
      <category term="Web" scheme="http://blog.david916.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>David-Auth Documentation</title>
    <link href="http://blog.david916.com/2020/12/17/David-Auth%20Spec/"/>
    <id>http://blog.david916.com/2020/12/17/David-Auth Spec/</id>
    <published>2020-12-17T15:11:30.941Z</published>
    <updated>2020-12-17T15:54:46.891Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>David-Auth is a SSO login system, which allow the apps under the domain <code>.wei.ai</code> to verify the user identity throw Json Web Token (JWT). The system currently support login ways through email / password, and Google / Facebook OAuth 2.0.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/12/17/K9ANYMU2mVeioSj.png" alt="David-Auth.png" title>                </div>                <div class="image-caption">David-Auth.png</div>            </figure><p><a href="https://test.wei.ai/" target="_blank" rel="noopener">Demo</a></p><p><a href="https://github.com/fssongwei/David-Auth" target="_blank" rel="noopener">Github</a></p><h3 id="Link-To-Login-Panel"><a href="#Link-To-Login-Panel" class="headerlink" title="Link To Login Panel"></a>Link To Login Panel</h3><p>To utilize the David-Auth, the app can set their login link direct to the David-Auth login system on <code>https://auth.wei.ai</code>. A url query string with parameter <code>origin</code> is required (it tells the auth server to redirect back to your app after authorization process finished, otherwise the login panel will show a error message). For example, if your app is running on <code>https://myapp.wei.ai</code>，simply construct the following link: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://auth.wei.ai/?origin=https://myapp.wei.ai"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="App-Backend-Configuration"><a href="#App-Backend-Configuration" class="headerlink" title="App Backend Configuration"></a>App Backend Configuration</h3><p>After users finish their authorization process, the auth server will issue a JWT token stored in the cookie (which the domain has configured as <code>.wei.ai</code>). The JWT contains the following user data:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">name: String,</span><br><span class="line">  avatar: String,</span><br><span class="line">  googleUserId: String,</span><br><span class="line">  facebookUserId: String,</span><br><span class="line">email: string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Detail user infomation data can also be accessed through <code>https://auth.wei.ai/user</code> (JWT Cookie Required)</p><p>The JWT cookie is now set to client browser and will be sent to the app backend server for every request. The app server can extract the JWT from the request cookie header and then verify.</p><p>The JWT issued by the auth server is signed and encrypt by the RSA key. The public key is provided below and can be used to verify if JWT is real:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC4Dppu06ECcPsnsr4/nnrRjscF</span><br><span class="line">QuqdeFd2fwYzzvP4pQSt41p0/Dl0kSuqN56eGBKsW8/l3bWdAsLAVLPBSRvWjaor</span><br><span class="line">A0ff0dteK9/RUGIKNLeq39LxV3p8wGnezA9mmY5I2o8HcQxR2jVPbzFGZYEMbmiB</span><br><span class="line">gSDJp94pgfhExoyILQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>(You can save the public key into a <code>pub.key</code> file)</p><p>The following example shows the JWT authentication process of a Express App using Passport.js and <code>passport-jwt</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// passportConfig.js</span></span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">"passport"</span>);</span><br><span class="line"><span class="keyword">const</span> JwtStrategy = <span class="built_in">require</span>(<span class="string">"passport-jwt"</span>).Strategy;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> opts = &#123;&#125;;</span><br><span class="line"><span class="comment">// Extract JWT from cookie</span></span><br><span class="line">opts.jwtFromRequest = <span class="function"><span class="keyword">function</span> (<span class="params">req</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> token = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (req &amp;&amp; req.cookies) &#123;</span><br><span class="line">    token = req.cookies[<span class="string">"jwt"</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> token;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// using the public key to verify JWT</span></span><br><span class="line"><span class="keyword">let</span> pubKey = fs.readFileSync(<span class="string">"./keys/pub.key"</span>);</span><br><span class="line">opts.secretOrKey = pubKey;</span><br><span class="line"></span><br><span class="line">passport.use(</span><br><span class="line">  <span class="keyword">new</span> JwtStrategy(opts, (jwt_payload, done) =&gt; &#123;</span><br><span class="line">    <span class="comment">// append the jwt payload data to req.user</span></span><br><span class="line">    done(<span class="literal">null</span>, jwt_payload.data);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">"cookie-parser"</span>);</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./passportConfig"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... other config &amp; middlewares</span></span><br><span class="line"></span><br><span class="line">router.get(</span><br><span class="line">  <span class="string">"/someSerectRequest"</span>,</span><br><span class="line">  <span class="comment">// use passport.js JWT middlewares to process authentication</span></span><br><span class="line">  passport.authenticate(<span class="string">"jwt"</span>, &#123; <span class="attr">session</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">  (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// user is authenticated, process the request</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;David-Auth is a SSO login syst
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Web" scheme="http://blog.david916.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Time Tracker - A mobile time tracking app</title>
    <link href="http://blog.david916.com/2020/10/31/TimeTracker/"/>
    <id>http://blog.david916.com/2020/10/31/TimeTracker/</id>
    <published>2020-10-31T03:30:39.434Z</published>
    <updated>2020-11-05T14:04:58.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Time Tracker is an app that helps you to keep track of your daily routine and stay focus. Users can time what they have done in a day. The app will automatically store those records, lists them and analyzes them, and using different well-designed charts to display the results, so that user can have an intuitive knowledge of how much time they have been spending in a specific task, and what are the most time-consuming tasks in a day. For example, I can know if I spend too much time playing games instead of reading books. Meanwhile, when the app is timing, the user can not use the phone (or the timer will stop), which helps users to focus on what they are doing right now.</p><p><a href="https://github.com/fssongwei/TimeTracker" target="_blank" rel="noopener">Github</a></p><p><a href="https://expo.io/@fssongwei/projects/TimeTracker" target="_blank" rel="noopener">Expo</a></p><p><a href="https://timetracker.wei.ai/assets/dist/file/TimeTracker.apk" target="_blank" rel="noopener">Android APK</a></p><p><a href="https://timetracker.wei.ai" target="_blank" rel="noopener">Website</a></p><h2 id="Technologies"><a href="#Technologies" class="headerlink" title="Technologies"></a>Technologies</h2><p>The app is built on React Native with Expo. User data are stored in the AsyncStorage in the local environment, and managed by redux. We choose Ant Design Mobile Native for the UI library. The charts are render by react-native-chart-kit &amp; react-native-svg-charts.</p><h2 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h2><ol><li>Add a task recorder (or timer), and user can choose color to label it.</li><li>Timing what the user is doing right now with the specific timer.</li><li>Record and store all the timing results.</li><li>List the timing records. The records are also mark with user pre-defined color.</li><li>User can filter the records with specific date or task.</li><li>Using pie chart to show the time duration distribution of each task in a day / week / month / year.</li><li>Using contribution map (heatmap) to show the activities of recent months.</li><li>Trend function: how much more (or less) time you have spent on a task in this week compares to lask weeks.</li><li>Clear All function: user can delete all records and timer data by one click.</li></ol><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><img src="https://i.loli.net/2020/10/31/9lQ3rTqs8dZWhLz.png" alt="index.png" style="zoom:50%;"><img src="https://i.loli.net/2020/10/31/WqHmfJp1McTECwz.png" alt="add.png" style="zoom:50%;"><img src="https://i.loli.net/2020/10/31/KcsMYOSUkJD3LwQ.png" alt="record.png" style="zoom:50%;"><img src="https://i.loli.net/2020/10/31/DXdimv6PBlxw2hj.png" alt="analysis.png" style="zoom:50%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Time Tracker is an app that he
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
      <category term="ReactNative" scheme="http://blog.david916.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>Classic Bubble Breaker Game</title>
    <link href="http://blog.david916.com/2020/10/07/Bubble%20Breaker/"/>
    <id>http://blog.david916.com/2020/10/07/Bubble Breaker/</id>
    <published>2020-10-07T09:39:38.204Z</published>
    <updated>2020-10-07T09:50:21.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This project is a classic bubble breaker game built on React. While user click on a ball (or a bubble), the game runs the DFS algorithm to find all the other ball that with the same color and connected to it. Once the user click again, the bubbles block wil be eliminated.</p><p>This project uses redux to manange the bubble board status. It also implemented the undo function, which allows users to go back one step after they break a bubble block.</p><p>I also plan to develop an iOS / Android version using react-native, and a wechat widget version using Taro.</p><p><a href="https://github.com/fssongwei/Bubble-Breaker" target="_blank" rel="noopener">github</a></p><p><a href="http://bubble-breaker.wei.ai" target="_blank" rel="noopener">demo</a></p><p><img src="https://i.loli.net/2020/10/07/KDhLA2FZnXuVzpa.png" alt="Bubble Breaker"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;This project is a classic bubb
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>iShop - A MERN stack Online Shopping Mall App</title>
    <link href="http://blog.david916.com/2020/09/22/iShop/"/>
    <id>http://blog.david916.com/2020/09/22/iShop/</id>
    <published>2020-09-22T13:31:38.000Z</published>
    <updated>2020-09-26T14:27:30.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>iShop is an online shopping mall web app built on React, Redux &amp; Material UI (Front-end) and Express &amp; MongoDb (Back-end), which implemented the following features:</p><ol><li>Implemented Google and Facebook OAuth 2.0 login &amp; User Register with Passport.js</li><li>User can create product information (includes product intro / category / price / remain amount / photos) to sell their products</li><li>Implemented the credit card payment with Stripe.js. Buyer can add or update the shopping cart, and check out with credit card to buy the products</li><li>Both buyer and seller can manage their transactions and orders through a dashboard</li></ol><p>The app is deployed at Google Cloud Platform using Google App Engine</p><p><a href="https://shop.wei.ai" target="_blank" rel="noopener">Demo</a></p><p><a href="https://github.com/fssongwei/iShop-Client" target="_blank" rel="noopener">Source Code - Front-end</a></p><p><a href="https://github.com/fssongwei/iShop-Server" target="_blank" rel="noopener">Source Code - Back-end</a></p><h3 id="Final-Product"><a href="#Final-Product" class="headerlink" title="Final Product"></a>Final Product</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/22/NSfP2y5t3vodGAn.png" alt="Landing Page & Cart" title>                </div>                <div class="image-caption">Landing Page & Cart</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/22/zW3SewQqYArtLby.png" alt="Product Display" title>                </div>                <div class="image-caption">Product Display</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/22/9jPG46JNolquCdz.png" alt="Checkout" title>                </div>                <div class="image-caption">Checkout</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/22/G7X65t3NTbZDQfy.png" alt="iSell Manage Dashboard" title>                </div>                <div class="image-caption">iSell Manage Dashboard</div>            </figure><p><strong>Read the design and thinking behind this project (in Chinese): <a href="https://blog.wei.ai/2020/09/20/从零开始用MERN搭建一个电商网站/" target="_blank" rel="noopener">link</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;iShop is an online shopping ma
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Express" scheme="http://blog.david916.com/tags/Express/"/>
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>从零开始用MERN搭建一个电商网站</title>
    <link href="http://blog.david916.com/2020/09/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8MERN%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%94%B5%E5%95%86%E7%BD%91%E7%AB%99/"/>
    <id>http://blog.david916.com/2020/09/22/从零开始用MERN搭建一个电商网站/</id>
    <published>2020-09-22T13:27:17.000Z</published>
    <updated>2020-12-20T16:27:17.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>最近接触到MERN技术栈，想做一个全栈的项目练练手。正好之前在上网课的时候有提到如何使用第三方服务如stripe搭建一个支付系统，把这个支付系统拓展一下就可以变为一个电商网站（或者二手交易网站）了。整个项目大概花了一星期不到的时间（周一到周六完成开发，周日写这篇文章），一开始以为会是一个简单的CRUD应用，然而做的时候才体会到该项目的复杂性，有很多模块之间相互影响，还有很多安全性、跨域问题需要考虑。感觉现在前端的功能还是非常强大的，基本上很多业务逻辑都可以在前端完成，然后通过RESTFul api从后台获取所需数据即可，开发时间相对以往则大大缩短。该项目虽然简单，但也实现了基本的电商网站功能比如用户登录、卖家创建和管理商品，购物车功能，商品支付与结算，订单管理等功能，整个项目代码量大概在3000多行。</p><p><a href="https://shop.wei.ai" target="_blank" rel="noopener">Demo</a></p><p><a href="https://github.com/fssongwei/iShop-Client" target="_blank" rel="noopener">Source Code - Front-end</a></p><p><a href="https://github.com/fssongwei/iShop-Server" target="_blank" rel="noopener">Source Code - Back-end</a></p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>该项目主要分为用户认证、商品、购物车、支付和订单管理五个模块，采用前后端分离的模式，前端使用axios通过api获取后端数据。前后端的文件结构如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Client</span></span><br><span class="line">├── public</span><br><span class="line">│   └── index.html</span><br><span class="line">└── src</span><br><span class="line">    ├── actions</span><br><span class="line">    │   ├── index.js</span><br><span class="line">    │   └── types.js</span><br><span class="line">    ├── components</span><br><span class="line">    │   ├── App.js</span><br><span class="line">    │   ├── Authentication</span><br><span class="line">    │   │   ├── Login.js</span><br><span class="line">    │   │   └── OAuthPanel.js</span><br><span class="line">    │   ├── Cart</span><br><span class="line">    │   │   ├── CartHooks.js</span><br><span class="line">    │   │   ├── CartMenu.js</span><br><span class="line">    │   │   ├── CartMenuItem.js</span><br><span class="line">    │   │   └── Checkout.js</span><br><span class="line">    │   ├── Checkout</span><br><span class="line">    │   │   ├── CardSection.js</span><br><span class="line">    │   │   ├── Checkout.js</span><br><span class="line">    │   │   ├── CheckoutForm.css</span><br><span class="line">    │   │   ├── CheckoutForm.js</span><br><span class="line">    │   │   ├── InjectedCheckoutForm.js</span><br><span class="line">    │   │   ├── OrderDetail</span><br><span class="line">    │   │   │   ├── AddressForm.js</span><br><span class="line">    │   │   │   ├── Index.js</span><br><span class="line">    │   │   │   └── OrderList.js</span><br><span class="line">    │   │   └── Success.js</span><br><span class="line">    │   ├── Dashboard</span><br><span class="line">    │   │   ├── BuyList.js</span><br><span class="line">    │   │   ├── ComfirmShipment.js</span><br><span class="line">    │   │   ├── FieldFileInput.js</span><br><span class="line">    │   │   ├── IBuy.js</span><br><span class="line">    │   │   ├── OrderDetail.js</span><br><span class="line">    │   │   ├── SellList.js</span><br><span class="line">    │   │   ├── hooks.js</span><br><span class="line">    │   │   └── iSell.js</span><br><span class="line">    │   ├── Header</span><br><span class="line">    │   │   ├── Header.js</span><br><span class="line">    │   │   └── HeaderMenu.js</span><br><span class="line">    │   ├── Landing</span><br><span class="line">    │   │   ├── Filter.js</span><br><span class="line">    │   │   ├── Landing.js</span><br><span class="line">    │   │   └── Searchbar.js</span><br><span class="line">    │   ├── Message.js</span><br><span class="line">    │   └── Products</span><br><span class="line">    │       ├── ProductCreate.js</span><br><span class="line">    │       ├── ProductDetail.js</span><br><span class="line">    │       ├── ProductEdit.js</span><br><span class="line">    │       ├── ProductForm.js</span><br><span class="line">    │       ├── ProductHooks.js</span><br><span class="line">    │       └── ProductList.js</span><br><span class="line">    ├── history.js</span><br><span class="line">    ├── hooks</span><br><span class="line">    │   ├── useProduct.js</span><br><span class="line">    │   ├── useProducts.js</span><br><span class="line">    │   └── useUser.js</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── reducers</span><br><span class="line">    │   ├── authReducer.js</span><br><span class="line">    │   ├── cartReducer.js</span><br><span class="line">    │   ├── index.js</span><br><span class="line">    │   └── messageReducer.js</span><br><span class="line">    ├── resources</span><br><span class="line">    │   └── categories.js</span><br><span class="line">    └── store.js</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> Server</span></span><br><span class="line">├── index.js</span><br><span class="line">├── middlewares</span><br><span class="line">│   └── requireLogin.js</span><br><span class="line">├── models</span><br><span class="line">│   ├── Cart.js</span><br><span class="line">│   ├── Order.js</span><br><span class="line">│   ├── Product.js</span><br><span class="line">│   ├── Transaction.js</span><br><span class="line">│   └── User.js</span><br><span class="line">├── routers</span><br><span class="line">│   ├── auth.js</span><br><span class="line">│   ├── cart.js</span><br><span class="line">│   ├── order.js</span><br><span class="line">│   ├── payment.js</span><br><span class="line">│   └── product.js</span><br><span class="line">└── services</span><br><span class="line">    └── createPayment.js</span><br></pre></td></tr></table></figure><h3 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h3><h4 id="用户数据和认证模块"><a href="#用户数据和认证模块" class="headerlink" title="用户数据和认证模块"></a>用户数据和认证模块</h4><p>该模块主要负责将新用户注册到数据库，并在前端通过api获取数据时验证用户身份。这一部分为了减轻项目复杂度，我就没有实现用户名和密码注册登录，而是通过Passport.js使用Google和Facebook OAuth进行验证登录。</p><ol><li><p>后端设置一个PassportConfig负责配置passport.js，注册用户，序列化和反序列化用户信息等操作</p><p>（需要先从google developer console获取client-secret和clientID，并在console中配置app url和callback url）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/passportConfig.js</span></span><br><span class="line"><span class="comment">// 1. 创建Strategy</span></span><br><span class="line"><span class="keyword">const</span> gStrategy = <span class="keyword">new</span> GoogleStrategy(</span><br><span class="line">  &#123;</span><br><span class="line">    clientID: process.env.GOOGLE_CLIENT_ID, <span class="comment">// provided by GCP console</span></span><br><span class="line">    clientSecret: process.env.GOOGLE_CLIENT_SECRET,<span class="comment">// provided by GCP console</span></span><br><span class="line">    callbackURL: process.env.GOOGLE_CALLBACK_URL, <span class="comment">// need to be configured in GCP console</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> (accessToken, refreshToken, profile, done) =&gt; &#123; <span class="comment">// 用户授权后，google返回用户数据（在profile中）</span></span><br><span class="line">    <span class="keyword">try</span> &#123; <span class="comment">// 根据profile中的googleUserId在用户数据库中查找用户</span></span><br><span class="line">      <span class="keyword">let</span> user = <span class="keyword">await</span> User.findOne(&#123; <span class="attr">googleUserId</span>: profile.id &#125;);</span><br><span class="line">      <span class="comment">// ... 判断用户数据库中是否存在user，如果不存在则注册一个新user</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) done(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 2. 序列化和反序列化用户（将用户数据存储在cookie / 从cookie中提取用户数据）</span></span><br><span class="line">passport.serializeUser(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;</span><br><span class="line">  done(<span class="literal">null</span>, user.id);</span><br><span class="line">&#125;);</span><br><span class="line">passport.deserializeUser(<span class="keyword">async</span> (id, done) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> User.findById(id);</span><br><span class="line">    done(<span class="literal">null</span>, user);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) done(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(补充：大陆用户无法直接使用Google服务，因此需要设置代理（如果server部署在大陆服务器上）)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ only required <span class="keyword">in</span> dev environment since I deployed the production environment <span class="keyword">in</span> Google App Engine</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">"development"</span>) &#123; </span><br><span class="line">  <span class="keyword">var</span> HttpsProxyAgent = <span class="built_in">require</span>(<span class="string">"https-proxy-agent"</span>);</span><br><span class="line">  <span class="keyword">const</span> agent = <span class="keyword">new</span> HttpsProxyAgent(</span><br><span class="line">    process.env.HTTP_PROXY || <span class="string">"YOUR_PROXY_ADDRESS"</span></span><br><span class="line">  );</span><br><span class="line">  gStrategy._oauth2.setAgent(agent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>设置登录和callback路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/routers/auth.js</span></span><br><span class="line">router.get(<span class="string">"/auth/google"</span>, passport.authenticate(<span class="string">"google"</span>, &#123; <span class="attr">scope</span>: [<span class="string">"profile"</span>] &#125;));</span><br><span class="line">router.get( <span class="string">"/auth/google/callback"</span>,</span><br><span class="line">  passport.authenticate(<span class="string">"google"</span>), <span class="comment">// 认证并设置cookie</span></span><br><span class="line">  (req, res) =&gt; res.redirect(<span class="string">`<span class="subst">$&#123;process.env.CLIENT_BASE_URL&#125;</span>`</span>); <span class="comment">// 重定向至前端URL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>用户在前端登录时跳转到<code>/auth/google</code>，会重定向至google验证页面。用户完成授权后，会从验证页面重定向回<code>/auth/google/callback</code>并携带授权码code，然后passport使用code获取用户profile等信息，完成用户认证或注册，设置cookie并重定向回前端相应页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录route</span></span><br><span class="line">router.get(<span class="string">"/auth/user"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.isAuthenticated()) res.status(<span class="number">200</span>).send(req.user._doc);</span><br><span class="line">  <span class="keyword">else</span> res.status(<span class="number">401</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"User is not login!"</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 退出登录route</span></span><br><span class="line">router.get(<span class="string">"/auth/logout"</span>, (req, res) =&gt; &#123;</span><br><span class="line">  req.logOut();</span><br><span class="line">  res.status(<span class="number">200</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"Log out success!"</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>前端在Landing Page，以及每个需要登录后才可访问的页面组件中调用<code>GET /auth/user</code> API检查用户登录情况，并将用户数据以全局的方式存储在redux中，以供后续组件访问</p><p>Action Creator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client/src/actions/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchAuthStatus = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">async</span> (dispatch) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> axios.get(<span class="string">`<span class="subst">$&#123;process.env.REACT_APP_API_BASE_URL&#125;</span>/auth/user`</span>);</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: FETCH_AUTH_STATUS, <span class="attr">user</span>: user.data &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) dispatch(&#123; <span class="attr">type</span>: FETCH_AUTH_STATUS, <span class="attr">user</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Reducer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> authReducer = <span class="function">(<span class="params">state = [<span class="literal">true</span>, <span class="literal">null</span>], action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type === FETCH_AUTH_STATUS) <span class="keyword">return</span> [<span class="literal">false</span>, action.user];</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>OAuth登录具体原理可以在我之前的blog (<a href="https://blog.wei.ai/2020/08/20/使用Passport.js实现Google%20OAuth登录/" target="_blank" rel="noopener">link</a>)中查看。</p><h4 id="商品模块"><a href="#商品模块" class="headerlink" title="商品模块"></a>商品模块</h4><p>这部分主要涉及商品的CRUD操作，相对比较基础，不过也涉及到一些redux-form表单等技术的使用，同时还实现了fuzzy-search模糊检索的功能</p><ol><li><p>商品数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> productSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  owner: &#123; <span class="attr">type</span>: mongoose.Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">"User"</span> &#125;, <span class="comment">// 创建者</span></span><br><span class="line">  name: <span class="built_in">String</span>, <span class="comment">// 商品名</span></span><br><span class="line">  intro: <span class="built_in">String</span>, <span class="comment">// 商品介绍</span></span><br><span class="line">  price: <span class="built_in">Number</span>, <span class="comment">// 商品单价</span></span><br><span class="line">  quantity: <span class="built_in">Number</span>, <span class="comment">// 库存数量</span></span><br><span class="line">  category: <span class="built_in">String</span>, <span class="comment">// 商品分类</span></span><br><span class="line">  pics: [<span class="built_in">String</span>], <span class="comment">// 商品图片URL列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>商品列表获取</p><p>这里我设置了一个query参数，以便前端获取商品列表时筛选所需数据。e.g. 设置<code>query={category: &quot;sport&quot;}</code>可以指定获取category为sport的数据，<code>query={term: &quot;iphone 12&quot;}</code>可以执行fuzzy search等</p><p>因为前端在多处可能会用到商品列表，所以我写了一个通用化的ProductList组件（篇幅太长就不在这放代码，路径为<code>/client/src/components/Products/ProductList.js</code> <a href="https://github.com/fssongwei/iShop-Client/blob/master/src/components/Products/ProductList.js" target="_blank" rel="noopener">link</a>）</p><p>具体而言，该组件从上层组件中接收一个query props，并从redux中获得user登录数据，以及两个action creator <code>popMessage</code> &amp; <code>setCartItem</code> 分别负责弹出提示和添加购物车（后续会补充）。该组件使用一个products hook通过调用异步api获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client/src/components/hooks/useProducts.js</span></span><br><span class="line"><span class="keyword">const</span> useProducts = <span class="function">(<span class="params">query</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [products, setProducts] = useState(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchProducts = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">`<span class="subst">$&#123;process.env.REACT_APP_API_BASE_URL&#125;</span>/products`</span>,</span><br><span class="line">          &#123;<span class="attr">params</span>: query,&#125;</span><br><span class="line">        );</span><br><span class="line">        setProducts(response.data);</span><br><span class="line">        setLoading(<span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;;</span><br><span class="line">    fetchProducts();</span><br><span class="line">  &#125;, [query]);</span><br><span class="line">  <span class="keyword">return</span> [loading, products];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后端route</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">"/products"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> products = &#123;&#125;;</span><br><span class="line">    <span class="comment">// fuzzy search 这里需要安装mongoose_fuzzy_searching包并设置对应的Product Schema</span></span><br><span class="line">    <span class="keyword">if</span> (req.query.term === <span class="string">""</span>) products = <span class="keyword">await</span> Product.find();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (req.query.term) products = <span class="keyword">await</span> Product.fuzzySearch(req.query.term);</span><br><span class="line">    <span class="keyword">else</span> products = <span class="keyword">await</span> Product.find(req.query);</span><br><span class="line">    res.status(<span class="number">200</span>).send(products);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) res.status(<span class="number">500</span>).send(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>显示商品信息</p><p>使用一个product hook异步调用<code>GET /product/:id</code> API获取具体的商品数据，并使用一个ProductDetail组件显示商品数据</p><p>注意这里ProductDetail组件同时通过redux接收user信息，判断如果该商品由该登录用户所创建，则显示修改商品的按钮，反之则显示添加购物车按钮</p><p>另外还使用了<code>react-material-ui-carousel</code>库用于滚动播放产品图片</p><p>useProduct Hook</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useProduct = <span class="function">(<span class="params">productId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [product, setProduct] = useState(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = useState(<span class="literal">true</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchProduct = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(</span><br><span class="line">          <span class="string">`<span class="subst">$&#123;process.env.REACT_APP_API_BASE_URL&#125;</span>/products/<span class="subst">$&#123;productId&#125;</span>`</span></span><br><span class="line">        );</span><br><span class="line">        setProduct(response.data);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) <span class="built_in">console</span>.log(error);</span><br><span class="line">      setLoading(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    fetchProduct();</span><br><span class="line">  &#125;, [productId]);</span><br><span class="line">  <span class="keyword">return</span> [loading, product];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>GET Product route</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">"/products/:id"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> product = <span class="keyword">await</span> Product.findById(req.params.id);</span><br><span class="line">    <span class="keyword">if</span> (!product) res.status(<span class="number">404</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"Product not found"</span> &#125;);</span><br><span class="line">    <span class="keyword">else</span> res.status(<span class="number">200</span>).send(product);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建和修改商品</p><p>创建和修改可以在前端共享一个ProductForm表单组件，通过使用redux-form管理该表单。</p><p>对于修改表单，则可设置reduxForm的enableReinitialize为true，通过使用useProduct Hook获取product数据后作为initialValues props传入到ProductForm组件中即可。共享该表单组件可以减轻许多任务量。</p><p>另外在后台需要设置两个middlewares <code>requireLogin</code> 和 <code>productUpdateCheck</code> 来检验用户是否登录，用户是否有权限修改该商品，以及用户所更新的信息是否合法等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> requireLogin = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.isAuthenticated()) next();</span><br><span class="line">  <span class="keyword">else</span> res.status(<span class="number">400</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"Unauthorize access!"</span> &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> productUpdateCheck = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> product = req.body;</span><br><span class="line">  <span class="keyword">if</span> (!product.name || !product.intro || !product.price ||!product.quantity ||!product.pics ||!product.category) &#123;</span><br><span class="line">    res.status(<span class="number">400</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"Invalid product submit!"</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  product.owner = req.user; <span class="comment">// add product owner</span></span><br><span class="line">  req.product = product;</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>删除商品</p><p>该部分比较简单，只需要从数据库中找到商品，验证商品是否由该用户创建，并删除即可。通过使用一个productOwnershipCheck中间件验证该商品的发布者：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> productOwnershipCheck = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> productId = req.params.id;</span><br><span class="line">    <span class="keyword">let</span> product = <span class="keyword">await</span> Product.findById(productId).populate(<span class="string">"owner"</span>).exec();</span><br><span class="line">    <span class="keyword">if</span> (req.user.id !== product.owner.id)</span><br><span class="line">      req.status(<span class="number">400</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"Unauthorized access!"</span> &#125;);</span><br><span class="line">    <span class="keyword">else</span> next();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    res.status(<span class="number">500</span>).send(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="购物车模块"><a href="#购物车模块" class="headerlink" title="购物车模块"></a>购物车模块</h4><p>这个模块设计到与其他多个模块之间（如用户数据模块、商品模块和后面支付模块）的数据交互，即这些模块都可以影响到购物车模块中的数据，比如用户可以在商品模块中将商品添加到购物车，支付模块需要提取购物车中的商品数据进行结算，同时购物车需要将其中的商品数据定时上传到用户数据模块，以供用户下次登录时使用。个人感觉该模块是这个商城应用中最复杂也是最容易出bug的部分。</p><ol><li><p>该模块的数据通过redux存储在store中以供全局访问，包括两个action creator: <code>setCartItem</code> 和 <code>fetchCartItems</code>：</p><ul><li><code>setCartItem</code>接收一个product对象和amount数值作为参数，用于设置购物车中某样商品的数量</li><li><code>fetchCartItems</code>从后端获取购物车数据（见第三点）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// action/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setCartItem = <span class="function">(<span class="params">product, amount</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> payload = &#123;&#125;;</span><br><span class="line">  payload.product = product;</span><br><span class="line">  payload.amount = amount;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">type</span>: SET_CART, <span class="attr">payload</span>: payload &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchCartItems = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">async</span> (dispatch) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> axios.get(<span class="string">`<span class="subst">$&#123;process.env.REACT_APP_API_BASE_URL&#125;</span>/cart`</span>);</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: FETCH_CART_ITEMS, <span class="attr">items</span>: res.data &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducers/cartReducer</span></span><br><span class="line"><span class="keyword">const</span> cartReducer = <span class="function">(<span class="params">state = <span class="literal">null</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type === FETCH_CART_ITEMS) <span class="keyword">return</span> action.items;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (action.type === SET_CART) &#123;</span><br><span class="line">    <span class="keyword">let</span> updateItem = action.payload;</span><br><span class="line">    <span class="keyword">let</span> newState = [...state];</span><br><span class="line">    <span class="keyword">let</span> hasItem = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> newState) &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.product._id === updateItem.product._id) &#123;</span><br><span class="line">        hasItem = <span class="literal">true</span>;</span><br><span class="line">        item.amount = updateItem.amount;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!hasItem) newState.push(updateItem);</span><br><span class="line">    newState = newState.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.amount &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> newState;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>后端将购物车中的数据存储到cart数据库中，该数据结构包含购物车所有者userId，以及一个items数组，用于存储每个在购物车中的商品productId以及数量amount：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/models/Cart.js</span></span><br><span class="line"><span class="keyword">const</span> cartSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  userId: <span class="built_in">String</span>,</span><br><span class="line">  items: [</span><br><span class="line">    &#123;</span><br><span class="line">      productId: <span class="built_in">String</span>,</span><br><span class="line">      amount: <span class="built_in">Number</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>cart在redux中的初始值为null，当值为null时，购物车需要使用<code>fetchCartItems</code>异步调用api获取上次用户访问所保存的购物车中的商品数据并保存在store中</p></li><li><p>创建一个CartMenu组件用于展示cart中的商品信息。对每个购物车中的商品，设置一组可以调节商品数量的按钮：</p><p>(注意该组件在后面结算过程中还会用到，因此需要通用化的设计)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(e) =&gt; &#123;e.preventDefault(); removeItem(); &#125;&#125; &gt; Delete &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;(e) =&gt; &#123;e.preventDefault(); addItem();&#125;&#125; &gt; Add &lt;/</span>button&gt;</span><br><span class="line">&lt;input</span><br><span class="line">  type=<span class="string">"number"</span></span><br><span class="line">  value=&#123;item.amount&#125;</span><br><span class="line">  <span class="comment">// 这里限制了商品数量不能设置为小于或等于0</span></span><br><span class="line">  onChange=&#123;(e) =&gt; &#123;<span class="keyword">if</span> (<span class="built_in">Number</span>(e.target.value) &gt; <span class="number">0</span>) setAmount(<span class="built_in">Number</span>(e.target.value));&#125;&#125;</span><br><span class="line">  onClick=&#123;(e) =&gt; e.preventDefault()&#125;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;button onClick=&#123;(e) =&gt; &#123;e.preventDefault(); reduceItem();&#125;&#125; &gt; Decrease &lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p>当用户点击加减或删除按钮，或者直接输入数字时，通过调用对应的listener或useEffect函数，使用<code>setCartItem</code> action creator对在redux中的cart数据进行更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> addItem = <span class="function"><span class="params">()</span> =&gt;</span> setAmount(<span class="built_in">Number</span>(amount) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> reduceItem = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">if</span> (<span class="built_in">Number</span>(amount) - <span class="number">1</span> &gt; <span class="number">0</span>) setAmount(<span class="built_in">Number</span>(amount) - <span class="number">1</span>);&#125;;</span><br><span class="line"><span class="keyword">const</span> removeItem = <span class="function"><span class="params">()</span> =&gt;</span> setAmount(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> func = <span class="function"><span class="params">()</span> =&gt;</span> dispatch(setCartItem(item.product, amount));</span><br><span class="line">  func();</span><br><span class="line">&#125;, [amount]);</span><br></pre></td></tr></table></figure></li><li><p>使用一个useEffect函数监听cart的变化并将cart中数据更新到后端数据库中：</p><p>（这里使用一个timer防止抖动，当用户停止修改购物车一段时间后才进行更新，避免频繁的api调用）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (cart === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> update = <span class="function">(<span class="params">cartItems</span>) =&gt;</span> updateCart(cartItems);</span><br><span class="line">  <span class="keyword">const</span> timerID = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cartItems = cart.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        productId: item.product._id,</span><br><span class="line">        amount: item.amount,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    update(cartItems);</span><br><span class="line">  &#125;, <span class="number">5000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;clearTimeout(timerID);&#125;;</span><br><span class="line">&#125;, [cart]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updateCart = <span class="keyword">async</span> (cart) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> axios.post(<span class="string">`<span class="subst">$&#123;process.env.REACT_APP_API_BASE_URL&#125;</span>/cart?_method=PUT`</span>, cart);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>后端route获取或更新cart</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">"/cart"</span>, requireLogin, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cart = <span class="keyword">await</span> Cart.findOne(&#123; <span class="attr">userId</span>: req.user.id &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!cart) cart = <span class="keyword">await</span> Cart.create(&#123; <span class="attr">userId</span>: req.user.id, <span class="attr">items</span>: [] &#125;); <span class="comment">// 当购物车不存在时创建购物车</span></span><br><span class="line">    cart.items = <span class="keyword">await</span> checkItems(cart.items);</span><br><span class="line">    <span class="keyword">await</span> cart.save();</span><br><span class="line">    <span class="keyword">let</span> cartItemsWithProduct = <span class="keyword">await</span> getCartItemsWithProduct(cart.items); <span class="comment">// 获取购物车中的商品数据</span></span><br><span class="line">    res.status(<span class="number">200</span>).send(cartItemsWithProduct);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.put(<span class="string">"/cart"</span>, requireLogin, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">await</span> checkItems(req.body);</span><br><span class="line">    <span class="keyword">let</span> cart = &#123; <span class="attr">userId</span>: req.user.id, <span class="attr">items</span>: items &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get cart</span></span><br><span class="line">    <span class="keyword">await</span> Cart.findOneAndUpdate(&#123; <span class="attr">userId</span>: req.user.id &#125;, cart, &#123;</span><br><span class="line">      upsert: <span class="literal">true</span>,</span><br><span class="line">      useFindAndModify: <span class="literal">false</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.status(<span class="number">200</span>).send(cart);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里使用了两个函数，由于篇幅太长不放代码在此，有兴趣可以参阅源码。其中，getCartItemsWithProduct负责获取cart中商品的详细数据（因为存储在cart中的仅为productId）并整理成数组发送，checkItems负责检查添加到cart中的商品数据是否和商品数据库中的数据一致，防止在传送途中被恶意修改</p></li></ol><h4 id="支付模块"><a href="#支付模块" class="headerlink" title="支付模块"></a>支付模块</h4><p>该模块主要使用stripe.js实现支付功能，需要比较强的安全性。整个check out的过程分为两步：用户点击check out按钮后，从redux中提取购物车的数据，并让用户填写送货地址表单。之后后端需要验证该交易是否合法（验证商品信息和金额等是否被篡改），然后使用stripe创建一个新的支付订单，用户在前端通过stripe完成支付后，后端服务器通过webhook收到stripe发来的订单确认信息，并将订单标记为“已支付”状态</p><ol><li><p>确认和创建订单：这里我们使用一个OrderDetail组件，其中包含AddressForm和OrderList两个组件</p><ul><li>AddressForm组件使用一个redux-form来创建address表单</li><li>OrderList组件包含之前购物车模块中的CartMenu组件，用于显示购物车中的商品数据</li></ul><p>另外我们需要在前端对address表单和cart中的数据进行验证：</p><ul><li><p>创建一个disableButton的state，默认值为false</p></li><li><p>使用一个useEffect函数监听address和cart，只有当两者都合法时才将disableButton设为ture，从而允许点击Next按钮</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (cart === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (cart.length === <span class="number">0</span>) history.push(<span class="string">"/"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!address || !address.firstName || !address.lastName || !address.address1 || </span><br><span class="line">    !address.city || !address.state || !address.zip || !address.country) <span class="keyword">return</span>;</span><br><span class="line">  setDisableButton(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> cart) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.amount &gt; item.product.quantity) &#123;</span><br><span class="line">      setDisableButton(<span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [address, cart]);</span><br></pre></td></tr></table></figure></li><li><p>信用卡支付页面：当用户点击next按钮后，将cart和address数据打包成一个transaction对象post到后端<code>/payment</code></p><p>后端验证商品信息后在数据库中创建订单，并使用stripe创建一个PaymentIntent对象（stripe用于管理每笔支付的对象），并将其中的client_secret返回给前端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client checkoutForm.js</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Create PaymentIntent as soon as the page loads</span></span><br><span class="line">  <span class="keyword">const</span> fetchClientSecret = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.post(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;process.env.REACT_APP_API_BASE_URL&#125;</span>/payment`</span>,</span><br><span class="line">      transaction</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> &#123; client_secret, totalPrice &#125; = response.data;</span><br><span class="line">    setClientSecret(client_secret);</span><br><span class="line">    setTotalPrice(totalPrice);</span><br><span class="line">  &#125;;</span><br><span class="line">  fetchClientSecret();</span><br><span class="line">&#125;, [transaction]);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server payment.js</span></span><br><span class="line">router.post(<span class="string">"/payment"</span>, chekTransaction, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> transaction = req.transaction;</span><br><span class="line">    <span class="comment">// split transactions to orders and add to database</span></span><br><span class="line">    <span class="keyword">let</span> createdOrders = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> order <span class="keyword">of</span> transaction.orders) &#123;</span><br><span class="line">      <span class="keyword">let</span> product = <span class="keyword">await</span> Product.findById(order.product.productId);</span><br><span class="line">      <span class="keyword">let</span> createdOrder = <span class="keyword">await</span> Order.create(&#123;</span><br><span class="line">        buyer: req.user,</span><br><span class="line">        owner: product.owner,</span><br><span class="line">        address: transaction.address,</span><br><span class="line">        product: order.product,</span><br><span class="line">        amount: order.amount,</span><br><span class="line">        status: <span class="string">"noPaid"</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      createdOrders.push(createdOrder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// add transactions to database</span></span><br><span class="line">    <span class="keyword">let</span> createdTransaction = <span class="keyword">await</span> Transaction.create(&#123;<span class="attr">buyer</span>: req.user, <span class="attr">orders</span>: createdOrders,&#125;);</span><br><span class="line">    <span class="keyword">const</span> intent = <span class="keyword">await</span> createPayment(transaction.totalPrice, <span class="string">"usd"</span>, createdTransaction.id);</span><br><span class="line">    res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">      client_secret: intent.client_secret,</span><br><span class="line">      totalPrice: transaction.totalPrice,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) res.status(<span class="number">500</span>).send(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于每笔transaction可能由多个买家发布的商品组成，所以这里将每笔transaction再基于单个商品分为每个order。transaction和order的数据结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transactionSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  buyer: &#123; <span class="attr">type</span>: mongoose.Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">"User"</span> &#125;,</span><br><span class="line">  orders: [&#123; <span class="attr">type</span>: mongoose.Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">"Order"</span> &#125;],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> orderSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  buyer: &#123; <span class="attr">type</span>: mongoose.Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">"User"</span> &#125;,</span><br><span class="line">  owner: &#123; <span class="attr">type</span>: mongoose.Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">"User"</span> &#125;,</span><br><span class="line">  address: &#123;</span><br><span class="line">    firstName: <span class="built_in">String</span>,</span><br><span class="line">    lastName: <span class="built_in">String</span>,</span><br><span class="line">    address1: <span class="built_in">String</span>,</span><br><span class="line">    address2: <span class="built_in">String</span>,</span><br><span class="line">    city: <span class="built_in">String</span>,</span><br><span class="line">    state: <span class="built_in">String</span>,</span><br><span class="line">    country: <span class="built_in">String</span>,</span><br><span class="line">    zip: <span class="built_in">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  product: &#123;</span><br><span class="line">    productId: <span class="built_in">String</span>,</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    price: <span class="built_in">String</span>,</span><br><span class="line">    pic: <span class="built_in">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  amount: <span class="built_in">Number</span>,</span><br><span class="line">  status: <span class="built_in">String</span>,</span><br><span class="line">  date: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">  trackCode: <span class="built_in">String</span>,</span><br><span class="line">  shipmentProvider: <span class="built_in">String</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用stripe自带的CardElement组件创建信用卡表单，然后使用之前获取的client secret提交支付请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> payload = <span class="keyword">await</span> stripe.confirmCardPayment(clientSecret, &#123;</span><br><span class="line">  payment_method: &#123;</span><br><span class="line">    card: elements.getElement(CardElement),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>stripe收到支付钱款后，会向一个我们预先定义的webhook发送支付状态等信息，然后我们可以以此设置transaction的status (e.g. nopaid / waiting / paid等)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">"/webhook"</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> event = req.body;</span><br><span class="line">    <span class="comment">// Handle the event</span></span><br><span class="line">    <span class="keyword">if</span> (event.type === <span class="string">"payment_intent.succeeded"</span>) &#123; <span class="comment">//仅处理支付成功的情况</span></span><br><span class="line">      <span class="keyword">const</span> paymentIntent = event.data.object;</span><br><span class="line">      <span class="keyword">let</span> transactionId = paymentIntent.metadata.transactionId;</span><br><span class="line">      <span class="keyword">let</span> transaction = <span class="keyword">await</span> Transaction.findById(transactionId)</span><br><span class="line">        .populate(<span class="string">"orders"</span>)</span><br><span class="line">        .exec();</span><br><span class="line">      <span class="built_in">console</span>.log(transaction);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> order <span class="keyword">of</span> transaction.orders) &#123;</span><br><span class="line">        order.status = <span class="string">"paid"</span>;</span><br><span class="line">        <span class="keyword">await</span> order.save();</span><br><span class="line">        <span class="keyword">let</span> product = <span class="keyword">await</span> Product.findById(order.product.productId);</span><br><span class="line">        <span class="keyword">if</span> (product) &#123;</span><br><span class="line">          product.quantity -= order.amount;</span><br><span class="line">          <span class="keyword">await</span> product.save();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.json(&#123; <span class="attr">received</span>: <span class="literal">true</span> &#125;); <span class="comment">// Return a 200 response to acknowledge receipt of the event</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>(附注：这个模块包含很多stripe的模板代码，具体可参阅源码和stripe api文档：<a href="https://stripe.com/docs/api" target="_blank" rel="noopener">link</a>)</p><h4 id="订单管理模块"><a href="#订单管理模块" class="headerlink" title="订单管理模块"></a>订单管理模块</h4><p>该模块分为iSell卖家模块和iBuy买家模块，分别维护一个订单order列表。另外，卖家可以在order status为paid时设置已发货信息（如运单号和快递商），买家可于收到货后确认收货，该order的状态变为completed</p><p>后端route代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">"/sell"</span>, requireLogin, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> orders = <span class="keyword">await</span> Order.find(&#123;</span><br><span class="line">      owner: req.user.id,</span><br><span class="line">      status: &#123; <span class="attr">$ne</span>: <span class="string">"noPaid"</span> &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.status(<span class="number">200</span>).send(orders);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">"/buy"</span>, requireLogin, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> orders = <span class="keyword">await</span> Order.find(&#123;</span><br><span class="line">      buyer: req.user.id,</span><br><span class="line">      status: &#123; <span class="attr">$ne</span>: <span class="string">"noPaid"</span> &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.status(<span class="number">200</span>).send(orders);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/comfirmShipment"</span>, requireLogin, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; orderId, trackCode, shipmentProvider &#125; = req.body;</span><br><span class="line">    <span class="keyword">let</span> order = <span class="keyword">await</span> Order.findById(orderId).populate(<span class="string">"owner"</span>).exec();</span><br><span class="line">    <span class="keyword">if</span> (!order || order.owner.id !== req.user.id) &#123;</span><br><span class="line">      res.status(<span class="number">400</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"Unauthorized access!"</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (trackCode) order.trackCode = trackCode;</span><br><span class="line">    <span class="keyword">if</span> (shipmentProvider) order.shipmentProvider = shipmentProvider;</span><br><span class="line">    order.status = <span class="string">"shipped"</span>;</span><br><span class="line">    <span class="keyword">await</span> order.save();</span><br><span class="line">    res.status(<span class="number">200</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"success!"</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">"/comfirmReceived"</span>, requireLogin, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; orderId &#125; = req.body;</span><br><span class="line">    <span class="keyword">let</span> order = <span class="keyword">await</span> Order.findById(orderId).populate(<span class="string">"buyer"</span>).exec();</span><br><span class="line">    <span class="keyword">if</span> (!order || order.buyer.id !== req.user.id) &#123;</span><br><span class="line">      res.status(<span class="number">400</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"Unauthorized access!"</span> &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    order.status = <span class="string">"completed"</span>;</span><br><span class="line">    <span class="keyword">await</span> order.save();</span><br><span class="line">    res.status(<span class="number">200</span>).send(&#123; <span class="attr">msg</span>: <span class="string">"success!"</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="网站部署和跨域问题"><a href="#网站部署和跨域问题" class="headerlink" title="网站部署和跨域问题"></a>网站部署和跨域问题</h3><p>最终网站的成品命名为iShop。该项目前后端是分离的，前端使用React并部署在Vercel上（shop.wei.ai），后端用Express搭建并部署在Google App Engine上（shop-api.wei.ai）。其实一开始后端本来是部署在Heroku上的，后面在开发的过程中遇到一些跨域问题，即safari浏览器仅接受来自相同域名的跨域api调用（参考之前的<a href="https://blog.wei.ai/2020/08/25/一次关于express%20sameSite%20cookies的debug/" target="_blank" rel="noopener">blog</a>），heroku的免费版又不支持自建域名和https。刚好之前GCP新用户注册还剩小半年免费期，就先部署在GCP了。当然缺点也是蛮明显的，就是国内用户访问很慢。以后可能会考虑将应用迁移到位于境内的服务器上。</p><p>（另外打个小广告，我最近注册了wei.ai域名，欢迎大家有空访问并提出意见）</p><h3 id="最终成品"><a href="#最终成品" class="headerlink" title="最终成品"></a>最终成品</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/22/NSfP2y5t3vodGAn.png" alt="首页和购物车" title>                </div>                <div class="image-caption">首页和购物车</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/22/zW3SewQqYArtLby.png" alt="商品展示页" title>                </div>                <div class="image-caption">商品展示页</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/22/9jPG46JNolquCdz.png" alt="结算页面" title>                </div>                <div class="image-caption">结算页面</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/22/G7X65t3NTbZDQfy.png" alt="卖家管理页面" title>                </div>                <div class="image-caption">卖家管理页面</div>            </figure><h3 id="未完待续。。。"><a href="#未完待续。。。" class="headerlink" title="未完待续。。。"></a>未完待续。。。</h3><p>（以下内容有时间或需求的话会继续更新）</p><ol><li>图片上传模块（可能于近期写一个图床应用，但需要一个大一点空间的服务器，穷o(╥﹏╥)o）</li><li>评论、点赞和收藏模块</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;最近接触到MERN技术栈，想做一个全栈的项目练练手。正好之前在上网课的时候有提到如何使用第三方服务如stripe搭建一个支付系统，把这个支付
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.david916.com/categories/Note/"/>
    
    
      <category term="Express" scheme="http://blog.david916.com/tags/Express/"/>
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>一次关于express sameSite cookies的debug</title>
    <link href="http://blog.david916.com/2020/09/21/%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8Eexpress%20sameSite%20cookies%E7%9A%84debug/"/>
    <id>http://blog.david916.com/2020/09/21/一次关于express sameSite cookies的debug/</id>
    <published>2020-09-21T03:57:49.000Z</published>
    <updated>2020-09-21T03:57:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写一个google / facebook oauth登录系统，前端使用react，后端使用nodejs + express，前后端分别部署在vercel和heroku上，不可避免的遇到很多跨域问题。</p><p>今天在将本地代码deploy到生产环境的时候，发现google oauth虽然能成功调用callback url重定向到后端，后端也能设置cookie，但后续的api操作却没有带上之前返回的cookie，导致无法通过api获取用户数据等信息。然而之前在开发环境测试的时候，api操作确实带上了cookie并成功获取数据，并且：</p><ol><li>在开发和生产环境中后端都设置了<code>cors({ credentials: true, origin: process.env.CLIENT_BASE_URL })</code></li><li>前端axios获取api数据时也设置了<code>axios.defaults.withCredentials = true;</code></li><li>生产环境中前端地址<code>localhost:3000</code>和后端地址<code>localhost:5000</code>同属于跨域，但测试正常</li></ol><p>查看console，发现以下错误信息：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A cookie associated with a cross-site resource at http://MYAPI.URL was set</span><br><span class="line">without the `SameSite` attribute. A future release of Chrome will only deliver </span><br><span class="line">cookies with cross-site requests if they are set with `SameSite=None` and </span><br><span class="line">`Secure`. You can review cookies in developer tools under </span><br><span class="line"><span class="meta">Application&gt;</span><span class="bash">Storage&gt;Cookies and see more details at </span></span><br><span class="line">https://www.chromestatus.com/feature/5088147346030592 and </span><br><span class="line">https://www.chromestatus.com/feature/5633521622188032.</span><br></pre></td></tr></table></figure><p>搜索后发现，该错误是由于chrome等浏览器最近的安全升级导致，该升级要求所有跨域cookie操作都必须要对cookie设置为<code>samesite=&quot;none&quot;</code>和<code>secure=&quot;true&quot;</code>，而且该升级只针对于host不同的情况，其余跨域诸如端口号等不受到影响，这也解释了为什么开发环境测试通过而生产环境出现错误。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie/SameSite" target="_blank" rel="noopener">MDN参考</a></p><p>后续设置express-session</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sessionConfig = &#123;</span><br><span class="line">  secret: process.env.SESSION_SECRET,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">  cookie: &#123;</span><br><span class="line">    sameSite: <span class="string">"none"</span>,</span><br><span class="line">    secure: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">app.use(session(sessionConfig));</span><br></pre></td></tr></table></figure><p>修改后新问题又来了，这次后端直接不设置cookie了，即response中不包含set-cookie。查阅<a href="https://github.com/expressjs/session#cookiesecure" target="_blank" rel="noopener">文档</a>后发现当设置cookie为secure时，需要通过https设置cookie，使用http将默认不设置cookie。因此express加多一行代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'trust proxy'</span>, <span class="number">1</span>) <span class="comment">// trust first proxy</span></span><br></pre></td></tr></table></figure><p>这次在生产环境测试成功，但生产环境的前后端地址都是由第三方提供的https地址，不知道为何也会出现这样的问题，猜想可能需要自行配置有效证书。</p><p><strong>Update on 2020-09-21</strong></p><p>上述问题其实是由于苹果safari浏览器的最新安全策略所导致的，现时safari浏览器无论是否设置cookie为secure或使用https，都仅允许同一域名下的跨域异步操作，在Google Chrome和Firefox浏览器测试中不存在上述问题。将server (<a href="https://shop-api.wei.ai" target="_blank" rel="noopener">https://shop-api.wei.ai</a>) 和client (<a href="https://shop.wei.ai" target="_blank" rel="noopener">https://shop.wei.ai</a>)  部署到同一域名下后问题解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在写一个google / facebook oauth登录系统，前端使用react，后端使用nodejs + express，前后端分别部署在vercel和heroku上，不可避免的遇到很多跨域问题。&lt;/p&gt;
&lt;p&gt;今天在将本地代码deploy到生产环境的时候，发现go
      
    
    </summary>
    
    
      <category term="Debug" scheme="http://blog.david916.com/categories/Debug/"/>
    
    
      <category term="Nodejs" scheme="http://blog.david916.com/tags/Nodejs/"/>
    
      <category term="Express" scheme="http://blog.david916.com/tags/Express/"/>
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Travel to the Northwest of China Vlog</title>
    <link href="http://blog.david916.com/2020/09/07/%E8%A5%BF%E5%8C%97%E6%B8%B8vlog/"/>
    <id>http://blog.david916.com/2020/09/07/西北游vlog/</id>
    <published>2020-09-07T14:56:09.000Z</published>
    <updated>2020-09-07T14:56:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>I recently traveled to Ningxia and Shaanxi provinces in China with my undergrad roommates and friends. I have been to the desert in Zhongwei city (中卫), the museum of Terracotta Army (兵马俑), and Mount Hua (华山). This vlog is automatically generated by the iPhone photos app, which is awesome.</p><p><a href="https://youtu.be/LETzL7fe5_s" target="_blank" rel="noopener">Vlog link</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/LETzL7fe5_s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I recently traveled to Ningxia and Shaanxi provinces in China with my undergrad roommates and friends. I have been to the desert in Zhong
      
    
    </summary>
    
    
      <category term="Life" scheme="http://blog.david916.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Passport.js实现Google OAuth登录</title>
    <link href="http://blog.david916.com/2020/08/21/%E4%BD%BF%E7%94%A8Passport.js%E5%AE%9E%E7%8E%B0Google%20OAuth%E7%99%BB%E5%BD%95/"/>
    <id>http://blog.david916.com/2020/08/21/使用Passport.js实现Google OAuth登录/</id>
    <published>2020-08-21T12:18:44.000Z</published>
    <updated>2020-08-21T12:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/fssongwei/Emaily-Server/tree/d6e87442e2ed7e5769b16352ab25d8af2522c43a" target="_blank" rel="noopener">Source Code</a></p><h3 id="Google-OAuth-2-0-登录流程"><a href="#Google-OAuth-2-0-登录流程" class="headerlink" title="Google OAuth 2.0 登录流程"></a>Google OAuth 2.0 登录流程</h3><img src="https://i.loli.net/2020/08/20/fA12XlsdSWVkHQD.jpg" alt="google oauth workflow.jpg" style="zoom: 33%;"><ol><li><p>client向server发起<code>GET /auth/google</code>请求</p></li><li><p>server将client重定向至google oauth登录页<code>https://accounts.google.com/o/oauth2/auth</code>，并附带以下查询参数集：</p><ul><li><code>response_type: code</code> 登录后返回授权码</li><li><code>client_id: GOOGLE_CLIENT_ID</code> Google控制台中的client_id，用于google识别应用程序</li><li><code>redirect_url: http://www.example.com/auth/google/callback</code> 回调URL，必须和Google控制台中设置的回调URL一致</li><li><code>scope: [&#39;profile&#39;, &#39;email&#39;]</code> 用户授权使用的数据返回，显示在oauth登录确认页中 </li></ul></li><li><p>用户在登录页授权登录后，google api server会将client重定向至之前设定的回调URL，并附带authorization code授权码</p></li><li><p>server收到针对回调URL的GET请求<code>GET /auth/google/callback</code>，从中提取出code授权码，并使用该code向google api server换取access token</p><ol><li><p>请求地址：<code>https://www.googleapis.com/oauth2/v3/token</code></p></li><li><p>请求参数</p><ul><li>code: 之前获得的授权码</li><li>grant_type: authorization_code：指明使用授权码进行验证</li><li>client_id，同上</li><li>client_secret，同上</li><li>redirect_url，同上</li></ul></li><li><p>返回值：</p><ul><li>access_token：用于获取其他google api数据或控制权</li><li>expires_in：过期时间</li><li>token_type：指明token类型</li><li>id_token：一串加密信息，使用base64 decode解密后可以获得用户邮箱email和用户唯一标识符sub等信息</li><li>refresh_token：access_token过期后，可以使用refresh_token来重新获取新的access_token，而不需要用户重新授权</li></ul><p>可以将上述token信息保存到数据库，即使用户不使用app时也能获取用户信息和代替用户进行google api操作等</p></li></ol></li><li><p>server从google api收到用户数据后，可以将用户注册到数据库，然后将用户信息序列化后设置cookie并返回给client，后续client使用该cookie进行身份验证</p></li></ol><p>使用passport middleware可以帮助我们简化中间与google api交互的流程，我们只需要设置以下组件：</p><ol><li>GoogleStrategy：设置clientID，clientSecret和callbackURL</li><li>verify / register callback function：接收用户数据，并完成后续用户认证和注册等流程</li><li>session serialization / deserialization：将用户信息存储到cookie/从cookie解码用户信息</li><li>next middleware（或router的callback function）：执行后续api数据返回</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/20/mNQkqEAIJrslYZH.jpg" alt="passportJS google oauth workflow.jpg" title>                </div>                <div class="image-caption">passportJS google oauth workflow.jpg</div>            </figure><p>创建google strategy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// passport-config.js</span></span><br><span class="line"><span class="keyword">let</span> myGoogleStrategy = <span class="keyword">new</span> GoogleStrategy(&#123;</span><br><span class="line">    clientID: GOOGLE_CLIENT_ID,</span><br><span class="line">    clientSecret: GOOGLE_CLIENT_SECRET,</span><br><span class="line">    callbackURL: <span class="string">"http://www.example.com/auth/google/callback"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">accessToken, refreshToken, profile, done</span>) </span>&#123;</span><br><span class="line">    User.findOrCreate(&#123; <span class="attr">googleId</span>: profile.id &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> done(err, user);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">"passport"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./passportConfig"</span>);</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/6844903509016444942" target="_blank" rel="noopener">Ref1</a> <a href="http://www.zchengjoey.com/posts/使用oauth2登录访问谷歌API/" target="_blank" rel="noopener">Ref2</a></p><h3 id="cookie验证流程"><a href="#cookie验证流程" class="headerlink" title="cookie验证流程"></a>cookie验证流程</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/21/JsmB7bFPDrS2wKQ.jpg" alt="session workflow.jpg" title>                </div>                <div class="image-caption">session workflow.jpg</div>            </figure><ol><li><p>Express-session middleware：用于解码从client发来的cookie</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">"express-session"</span>);</span><br><span class="line">app.use(</span><br><span class="line">  session(&#123;</span><br><span class="line">    secret: process.env.SESSION_SECRET,</span><br><span class="line">    resave: <span class="literal">false</span>,</span><br><span class="line">    saveUninitialized: <span class="literal">false</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>passport.initialize() middleware：负责从cookie中提取userId</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">app.use(passport.initialize());</span><br></pre></td></tr></table></figure></li><li><p>app.use(passport.session())：使用userId，从数据库中获取user，或将user序列化为cookie</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// passport-config.js</span></span><br><span class="line">passport.serializeUser(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;</span><br><span class="line">  done(<span class="literal">null</span>, user.id);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">passport.deserializeUser(<span class="keyword">async</span> (id, done) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> User.findById(id);</span><br><span class="line">    done(<span class="literal">null</span>, user);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    done(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line">app.use(passport.session())</span><br></pre></td></tr></table></figure></li><li><p>Self-defined middleware：使用<code>req.isAuthenticated()</code>函数验证登录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">middlewares.checkAuthenticated = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.isAuthenticated()) &#123;</span><br><span class="line">          next();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          req.flash(<span class="string">"error"</span>, <span class="string">"You need to login first"</span>);</span><br><span class="line">          res.redirect(<span class="string">"/auth/login"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/fssongwei/Emaily-Server/tree/d6e87442e2ed7e5769b16352ab25d8af2522c43a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Source 
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.david916.com/categories/Note/"/>
    
    
      <category term="Nodejs" scheme="http://blog.david916.com/tags/Nodejs/"/>
    
      <category term="Express" scheme="http://blog.david916.com/tags/Express/"/>
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>React APIs Widget</title>
    <link href="http://blog.david916.com/2020/08/05/React%20APIs%20Widget/"/>
    <id>http://blog.david916.com/2020/08/05/React APIs Widget/</id>
    <published>2020-08-05T08:38:54.000Z</published>
    <updated>2020-08-05T08:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>This <strong>React</strong> app contains four different widgets:</p><ol><li><p>A translate widget using <a href="https://cloud.google.com/translate" target="_blank" rel="noopener">Google Translate API</a></p><p><img src="https://i.loli.net/2020/08/05/LyblAxXJoU2taBh.png" alt="Translate Widget.png"></p></li><li><p>A wiki search widget using <a href="https://www.mediawiki.org/wiki/API:Main_page" target="_blank" rel="noopener">Wikepedia API</a></p><p><img src="https://i.loli.net/2020/08/05/iLCZd4Tpsx61v7Y.png" alt="Wiki Widget.png"></p></li><li><p>A photo search widget using <a href="https://unsplash.com/developers" target="_blank" rel="noopener">Unsplash API</a></p><p><img src="https://i.loli.net/2020/08/05/37iXTd9qkC6JEw4.png" alt="Photo Widget.png"></p></li><li><p>A youtube widget using <a href="https://developers.google.com/youtube/v3" target="_blank" rel="noopener">Youtube Data API v3</a></p><p><img src="https://i.loli.net/2020/08/05/MJBP5OfcsyxFVQb.png" alt="Youtube Widget.png"></p></li></ol><p>Other tools &amp; libraries include:</p><ol><li><a href="https://fezvrasta.github.io/bootstrap-material-design/" target="_blank" rel="noopener">Bootstrap Material Design</a> - UI Library</li><li><a href="https://github.com/axios/axios" target="_blank" rel="noopener">Axios</a> - HTTP Library</li><li><a href="https://www.npmjs.com/package/faker" target="_blank" rel="noopener">Faker.js</a> - Random String Generator</li></ol><p><a href="https://react-api-s-widgets.vercel.app" target="_blank" rel="noopener">Live Demo</a><br><a href="https://github.com/fssongwei/React-APIs-Widgets" target="_blank" rel="noopener">Source Code</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;This &lt;strong&gt;React&lt;/strong&gt; ap
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Youtube Shuffle</title>
    <link href="http://blog.david916.com/2020/08/05/Youtube%20Shuffle/"/>
    <id>http://blog.david916.com/2020/08/05/Youtube Shuffle/</id>
    <published>2020-08-05T05:54:30.000Z</published>
    <updated>2020-08-05T05:54:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p><a href="https://youtube-shuffle.vercel.app" target="_blank" rel="noopener">Live Demo</a></p><p><a href="https://github.com/fssongwei/Youtube-Shuffle" target="_blank" rel="noopener">Source Code</a></p><p>Youtube shuffle is a <strong>React</strong> app using Youtube Data API. It has a personalized user interface which allows users to search a Youtube video and play it. It also includes a shuffle function, which the program will randomly generated a keyword and presents the related videos from Youtube.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/07/31/mqlB7crGP5wUXiC.png" alt="Youtube Shuffle.png" title>                </div>                <div class="image-caption">Youtube Shuffle.png</div>            </figure><p>Technologies and libraries using in this project are listing below: </p><p><strong>Front-end Library</strong>: React</p><p><strong>UI Library</strong>: MDUI</p><p><strong>APIs</strong>: Youtube Data API v3</p><p><strong>Other Libraries</strong>: Faker.js (to generate random keywords)</p><p>This project was bootstrapped with <a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">Create React App</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://youtube-shuff
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>在React中实现Debounced Textfield</title>
    <link href="http://blog.david916.com/2020/08/03/React:%20Debounced%20Textfield/"/>
    <id>http://blog.david916.com/2020/08/03/React: Debounced Textfield/</id>
    <published>2020-08-03T12:57:05.000Z</published>
    <updated>2020-08-03T12:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>假设我们需要实现一种类似google的搜索提示功能，即用户输入搜索词的过程中，输入框的下方会同步显示搜索的候选项：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://media1.tenor.com/images/cec9b2f2b8732aa68285a1930e9064a0/tenor.gif?itemid=14832746" alt title>                </div>                <div class="image-caption"></div>            </figure><p>基本方案：通过input的onChange listener监听input field文本的变化，并通过调用api返回提示结果</p><p>存在问题：每次用户输入或删除一个字符，即调用一次API，造成资源浪费。我们希望可以设置一个timer，当用户停止输入一段时间后，才调用api并返回结果</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/03/byS1WNK9I27HEXU.png" alt="workflow.png" title>                </div>                <div class="image-caption">workflow.png</div>            </figure><ol><li><p>设置两个state，分别为text和debouncedText</p></li><li><p>每当event listener监听到变化，调用setText函数重设state中的text</p></li><li><p>使用useEffect监听text的变化，并执行以下步骤</p><ol><li>设定一个timer，延迟一段时间（500ms）后使用text和setDebouncedText函数来设置debouncedText的值</li><li>返回一个useEffect cleanup funtion来删除这个timer。这个cleanup function将会在下一次text发生变化时调用并清理掉上一次设置的timer。</li></ol><p>假设当前text和debouncedText字符串为”abc”，用户分别再输入’d’和’e’，此时存在两种情况：</p><ol><li>当用户两次键入字符时间小于500ms时，前一次timer的设定时间还没到而不会产生更新，而后面cleanup funtion会清理掉前面设置的timer，因此debouncedText的值不变，仍为”abc”</li><li>当用户两次键入字符时间大于500ms时，前一次timer已到时，会调用setDebounced来更新debouncedText的值，此时为”abcd”</li></ol></li><li><p>使用另一个useEffect监听debouncedText的变化，并完成api等操作</p></li></ol><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DebouncedTextField.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DebouncedTextField = <span class="function">(<span class="params">&#123; initText, onTextChange &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState(initText);</span><br><span class="line">  <span class="keyword">const</span> [debouncedText, setDebouncedText] = useState(initText);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> timerID = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setDebouncedText(text);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      clearTimeout(timerID);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [text]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// debouncedText发生变化后调用onTextChange执行后续api操作等</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> onTextChange(debouncedText), [debouncedText, onTextChange]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> onChange=&#123;(e) =&gt; setText(e.target.value)&#125; value=&#123;text&#125; /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> DebouncedTextField;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;假设我们需要实现一种类似google的搜索提示功能，即用户输
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.david916.com/categories/Note/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React：一次关于onclick的debug</title>
    <link href="http://blog.david916.com/2020/08/02/React%EF%BC%9A%E4%B8%80%E6%AC%A1%E5%85%B3%E4%BA%8Eonclick%E7%9A%84debug/"/>
    <id>http://blog.david916.com/2020/08/02/React：一次关于onclick的debug/</id>
    <published>2020-08-02T14:13:26.000Z</published>
    <updated>2020-08-02T14:13:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>React中可以向onClick（onSubmit，onChange等同理）中传入一个函数，这个函数会在组件被click时执行：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line"><span class="comment">// some code to execute after button clicked</span></span><br><span class="line">&#125;&#125;&gt;</span><br></pre></td></tr></table></figure><p>这个函数可以接受一个参数，即event：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(event) =&gt; &#123;</span><br><span class="line"><span class="comment">// some code to execute after button clicked</span></span><br><span class="line"><span class="comment">// you can use event object to do something, such as event.target.value</span></span><br><span class="line">&#125;&#125;&gt;</span><br></pre></td></tr></table></figure><p>同时也可以在函数体中使用该component内，该函数外定义的其他变量，且这些变量不需要通过该函数的参数传入，e.g.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设外部定义了一个名为item的state变量，还有一个从上层component传递下来的callback函数 cbfunc() 需要使用该item变量</span></span><br><span class="line">&lt;button onClick=&#123;() =&gt; cbfunc(item)&#125;&gt;</span><br></pre></td></tr></table></figure><p>下面这种写法是错误的，即不需要将item作为参数传入，且第一个传入的参数会被当成event对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;(item) =&gt; cbfunc(item)&#125;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React中可以向onClick（onSubmit，onChange等同理）中传入一个函数，这个函数会在组件被click时执行：&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="Debug" scheme="http://blog.david916.com/categories/Debug/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="React" scheme="http://blog.david916.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Yelp Camp - A full-stack Node.js Web Application Project</title>
    <link href="http://blog.david916.com/2020/07/19/Yelp%20Camp%20-%20A%20full-stack%20Node.js%20Web%20Application%20Project/"/>
    <id>http://blog.david916.com/2020/07/19/Yelp Camp - A full-stack Node.js Web Application Project/</id>
    <published>2020-07-19T11:27:00.000Z</published>
    <updated>2020-07-19T11:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Yelp Camp is a Yelp-like node.js web app. It’s the final course project of the Web Develop Bootcamp course in Udemy. Users and campground owners can upload their campground information to the website, and other users can leave a comment to the campground.</p><p><a href="http://app.david916.com:2000" target="_blank" rel="noopener">Live Demo</a><br><a href="https://github.com/fssongwei/YelpCamp" target="_blank" rel="noopener">Source Code</a></p><p>The app is built on Node.js with Express. Other technologies and library using in this project are listing below: </p><p><strong>UI Library</strong>: Bootstrap</p><p><strong>Database</strong>: MongoDB, Mongoose</p><p><strong>Authentication</strong>: passport.js, bcrypt, express-session, express-flash</p><h2 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h2><h5 id="2020-7-19-Version-1-0"><a href="#2020-7-19-Version-1-0" class="headerlink" title="2020.7.19 Version 1.0"></a>2020.7.19 Version 1.0</h5><ol><li>Front-end development with HTML/CSS/JS and Bootstrap 4</li><li>Back-end development with Node.js and Express</li><li>Built user login and register system with Passport.js</li><li>Developed Posts module and Comments module</li></ol><h5 id="To-do-List"><a href="#To-do-List" class="headerlink" title="To-do List"></a>To-do List</h5><p>Other features comming. If you have any idea, send email to <a href="mailto:ws446@cornell.edu" target="_blank" rel="noopener">ws446@cornell.edu</a></p><ol><li>Fuzzy Search </li><li>Campground location with Google Maps</li><li>User profile </li><li>Password reset </li><li>Image upload with multer and cloudinary </li><li>Payment with Stripe API</li><li>Ratings</li><li>Pagination in campgrounds index</li></ol><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/07/19/jJb98kKhSAsix5M.png" alt="mainpage.png" title>                </div>                <div class="image-caption">mainpage.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/07/19/rjnZtfvFVU9caLR.png" alt="camppage.png" title>                </div>                <div class="image-caption">camppage.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Yelp Camp is a Yelp-like node.
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Nodejs" scheme="http://blog.david916.com/tags/Nodejs/"/>
    
      <category term="Express" scheme="http://blog.david916.com/tags/Express/"/>
    
      <category term="Bootstrap" scheme="http://blog.david916.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Dwitter - A Twitter-like Social Media App</title>
    <link href="http://blog.david916.com/2020/07/17/Dwitter%20-%20A%20Twitter-like%20Social%20Media%20App/"/>
    <id>http://blog.david916.com/2020/07/17/Dwitter - A Twitter-like Social Media App/</id>
    <published>2020-07-16T16:00:00.000Z</published>
    <updated>2020-07-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Dwitter is a Twitter-like social media web app written in Javascript. The name “Dwitter” stands for “David’s Twitter”. Users can post their thoughs, follow other user, comment and like other user’s posts.</p><p><a href="http://app.david916.com:3000" target="_blank" rel="noopener">Live Demo</a><br><a href="https://github.com/fssongwei/Dwitter" target="_blank" rel="noopener">Source Code</a></p><p>The app is built on Node.js with Express. Other technologies and library using in this project are listing below: </p><p><strong>UI Library</strong>: MDUI</p><p><strong>Database</strong>: MongoDB, Mongoose</p><p><strong>Authentication</strong>: passport.js, bcrypt, express-session, express-flash</p><h2 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h2><h5 id="2020-7-16-Version-1-0"><a href="#2020-7-16-Version-1-0" class="headerlink" title="2020.7.16 Version 1.0"></a>2020.7.16 Version 1.0</h5><p>(The app is officially for public testing)</p><ol><li>Improve UI with MDUI (Material Design UI)</li><li>Add following &amp; unfollowing features</li><li>Add like &amp; unlike features</li><li>Implement express-flash to show flash message</li></ol><h5 id="2020-7-15"><a href="#2020-7-15" class="headerlink" title="2020.7.15"></a>2020.7.15</h5><ol><li>Authentication with passport.js</li><li>Refactor the code</li></ol><h5 id="2020-7-14"><a href="#2020-7-14" class="headerlink" title="2020.7.14"></a>2020.7.14</h5><ol><li>Initialize the project by setting up the routers and database models</li><li>Add Basic UI with HTML &amp; CSS</li><li>Add posts &amp; comments create and delete features</li></ol><h5 id="To-do-List"><a href="#To-do-List" class="headerlink" title="To-do List"></a>To-do List</h5><p>Other features comming. If you have any idea, send email to <a href="mailto:ws446@cornell.edu" target="_blank" rel="noopener">ws446@cornell.edu</a></p><ol><li>Implement photo library for user to upload their photos</li><li>Display the number of favorite for each post</li><li>Implement google / facebook login</li><li>User can change their own avatars</li><li>Routers refactor</li></ol><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="https://i.loli.net/2020/07/19/Fzc5LiMEWo4Z32O.png" alt="MainPage.png" style="height: 500px;"><img src="https://i.loli.net/2020/07/19/r6ZmgcyPYRt4i89.png" alt="profilePage.png" style="height: 500px;"><br><img src="https://i.loli.net/2020/07/19/3LxnoeavjfT89qH.png" alt="followingPage.png" style="height: 500px;"><img src="https://i.loli.net/2020/07/19/fuabQnrldK9Pze5.png" alt="loginPage.png" style="height: 500px;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;Dwitter is a Twitter-like soci
      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Nodejs" scheme="http://blog.david916.com/tags/Nodejs/"/>
    
      <category term="Express" scheme="http://blog.david916.com/tags/Express/"/>
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Web Develop Bootcamp Front-end Projects</title>
    <link href="http://blog.david916.com/2020/06/22/Web%20Develop%20Bootcamp%20Front-end%20Projects/"/>
    <id>http://blog.david916.com/2020/06/22/Web Develop Bootcamp Front-end Projects/</id>
    <published>2020-06-21T16:00:00.000Z</published>
    <updated>2020-06-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Below are some of the web developer bootcamp course projects. All of them are purely front-end app with only HTML / CSS / Javascript</p><p><a href="https://github.com/fssongwei/WDB-Projects" target="_blank" rel="noopener">Source Code</a></p><h4 id="Color-Guessing-Game"><a href="#Color-Guessing-Game" class="headerlink" title="Color Guessing Game"></a>Color Guessing Game</h4><p>The game will give an RGB value and some squares fill with different color. The player choose the correct color square that matches the given RGB value wins. There are three difficulty level to choose. The game also includes a statistics function to calculate the correct rate of the player.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/07/19/V7fmPHsA4kO8MZo.png" alt="colorGame.png" title>                </div>                <div class="image-caption">colorGame.png</div>            </figure><p><a href="https://www.david916.com/projects/patatap/index.html" target="_blank" rel="noopener">Demo</a></p><h4 id="To-Do-List"><a href="#To-Do-List" class="headerlink" title="To-Do List"></a>To-Do List</h4><p>This tool allows user to keep track of their daily tasks. User can update a task, mark it as completed, or delete a task.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/07/19/nQARgB2shIMb1q7.png" alt="TodoList.png" title>                </div>                <div class="image-caption">TodoList.png</div>            </figure><p><a href="https://www.david916.com/projects/todolist/" target="_blank" rel="noopener">Demo</a></p><h4 id="Patatap"><a href="#Patatap" class="headerlink" title="Patatap"></a>Patatap</h4><p>Patatap is a fun music game. User can type any key on their keyborad and the game will play different sounds and show animated circle on the screen with different colors.</p><p>Several javacript library are included in this project, includes JQuery, Paper.js and Howler.js</p><p><a href="https://www.david916.com/projects/colorgame/" target="_blank" rel="noopener">Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Below are some of the web developer bootcamp course projects. All of them are purely front-end app with only HTML / CSS / Javascript&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Projects" scheme="http://blog.david916.com/categories/Projects/"/>
    
    
      <category term="Javascript" scheme="http://blog.david916.com/tags/Javascript/"/>
    
      <category term="HTML" scheme="http://blog.david916.com/tags/HTML/"/>
    
      <category term="CSS" scheme="http://blog.david916.com/tags/CSS/"/>
    
  </entry>
  
</feed>
