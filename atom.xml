<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David&#39;s Blog</title>
  
  <subtitle>我怕是个假程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.david916.com/"/>
  <updated>2019-12-20T13:08:24.870Z</updated>
  <id>http://blog.david916.com/</id>
  
  <author>
    <name>Wei Song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GPU Accelerated Similarity Self-join</title>
    <link href="http://blog.david916.com/2019/12/20/GPU%20Accelerated%20Similarity%20Self-join/"/>
    <id>http://blog.david916.com/2019/12/20/GPU Accelerated Similarity Self-join/</id>
    <published>2019-12-20T11:49:08.321Z</published>
    <updated>2019-12-20T13:08:24.870Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>The similarity self-join is an operation that finds all objects in a dataset within a distance threshold of each other. A typical method for the self-join is to utilize the search-and-refine strategy: search a set of candidate points that may be within the search radius for every query point, and then refine them by performing the distance calculations. Numerous searches for points within the search distance take advantage of the GPU’s high memory bandwidth and massive parallelism. Thus, the GPU’s architecture is suitable for massively parallel range queries and join operations.</p><h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><p>There are many ways for points indexing, divided into two categories: Tree-based indexes (such as R-trees, quad-trees and kd-trees), and non-hierarchical indexes (such as Grids, see Figure 1). Due to the GPU’s SIMT architecture, tree indexes cause divergence in workload among the groups of threads in GPU call warp, so the total performance is depend on the threads in a warp that needs the longest time. On the other hands, each thread performs similar execution pathways in Grid structure. However, we may still have various number of points in different cells in a grid, which is also not very efficient in SIMT architecture.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/20/nPJtpXEuKz3ABdO.png" alt="Figure 1" title>                </div>                <div class="image-caption">Figure 1</div>            </figure>{:width="60%"}<p>(Figure 1: An example of grid indexing structure in 2D. We want to find all the points that are within ε with point p (the point in the circle area). In order to do that, we use the grid index structure so every point are within a grid cell. Then we  search all the points in the cells adjacents to the cell that contains p (nine cells in the large square bounded by the dash line) to limit the search area. After we find all the points, we verify each point by performing distance calculations (in here we use Euclidean metric), to see if the point are within the circle)</p><p>Our goal is to minimize the divergence of workload among each threads. To achieve that, we utilize the grid structure, improve it and develop another two grid-base indexing methods. We also extract the feature of datasets to determin which grid indexes we should use, in order to maximize the performance. We have run experiments on differents datasets, synthetic or real-world, and our method generally has better performance, with up to 20x speedup compare to a CPU implementation and up to 5.5x speedup compare to another state-of-art GPU implementation (See Figure 2).</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/12/20/YaqAsM9QzmDoEtN.jpg" alt="Figure 2" title>                </div>                <div class="image-caption">Figure 2</div>            </figure>{:width="60%"}<p>(Figure 2: (a) compared with another CPU self-join implementation call SuperEgo and (b) compare to another GPU self-join implementation call GPUCalcGlobal. Datasets are from 2D to 8D. The red lines show the average speedup 6.0x and 2.0x, and the black dash line shows where our approach achieves a speedup (or slowdown)).</p><p>We are currently improving our optimization methods and drafting the related outcomes. To be continued …</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;The similarity self-join is an
      
    
    </summary>
    
    
      <category term="Tech" scheme="http://blog.david916.com/categories/Tech/"/>
    
    
      <category term="GPU" scheme="http://blog.david916.com/tags/GPU/"/>
    
      <category term="Self-join" scheme="http://blog.david916.com/tags/Self-join/"/>
    
      <category term="Parallel Computing" scheme="http://blog.david916.com/tags/Parallel-Computing/"/>
    
  </entry>
  
  <entry>
    <title>Cent OS 安装Nginx+PHP+FTP环境</title>
    <link href="http://blog.david916.com/2019/09/29/php%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://blog.david916.com/2019/09/29/php环境搭建/</id>
    <published>2019-09-29T13:25:54.000Z</published>
    <updated>2019-09-29T13:28:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装Nginx服务器"><a href="#安装Nginx服务器" class="headerlink" title="安装Nginx服务器"></a>安装Nginx服务器</h3><ol><li><p>添加yum源:<br> <code>sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></p></li><li><p>安装Nginx:<br> <code>sudo yum install nginx</code></p></li><li><p>安装OpenSSL（即Https支持，选装）:<br> <code>yum install -y openssl openssl-devel</code></p></li><li><p>设置开机启动:<br> <code>sudo systemctl enable nginx</code></p></li><li><p>启动Nginx服务:<br> <code>sudo systemctl start nginx</code><br> 附注:<br> <code>sudo systemctl restart nginx</code>: 重启Nginx；<br> <code>sudo systemctl reload nginx</code>: 重新加载Nginx</p></li><li><p>打开防火墙端口:<br> <code>sudo firewall-cmd --zone=public --permanent --add-service=http</code>: 打开HTTP服务(即80端口)  </p><pre><code>(等同命令：`firewall-cmd --zone=public --add-port=80/tcp --permanent`)  </code></pre><p> <code>sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent</code>: 开放3306端口<br> <code>sudo firewall-cmd --zone=public --add-port=9000/tcp --permanent</code>: 开放9000端口<br> <code>sudo firewall-cmd --reload</code>: 重新加载防火墙（重要！每次打开端口后都需要执行此命令）<br> <code>sudo sudo firewall-cmd --list-service</code>: 查看防火墙打卡的服务</p><p> 附注：centOS防火墙相关命令<br> <code>systemctl status firewalld</code>: 查看防火墙状态<br> <code>systemctl start firewalld</code>: 开启防火墙<br> <code>systemctl stop firewalld</code>: 关闭防火墙</p><p> 此时打开服务器ip或者网址，可以看到“Welcome to nginx!”页面即为安装成功</p><p> 网站文件存放目录: <code>/usr/share/nginx/html</code><br> Nginx全局配置文件: <code>/etc/nginx/nginx.conf</code></p></li></ol><h3 id="安装PHP"><a href="#安装PHP" class="headerlink" title="安装PHP"></a>安装PHP</h3><ol><li><p>添加yum源:  </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm  </span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装php 7.0<br> <code>yum install php70w.x86_64 php70w-cli.x86_64 php70w-common.x86_64 php70w-gd.x86_64 php70w-ldap.x86_64 php70w-mbstring.x86_64 php70w-mcrypt.x86_64 php70w-mysql.x86_64 php70w-pdo.x86_64</code></p></li><li><p>安装php-fpm（Nginx和PHP连接软件）:<br> <code>yum install php70w-fpm</code></p></li><li><p>安装php-mbstring（防止PHP出现中文乱码）:<br> <code>yum  -y install php-mbstring</code></p></li><li><p>(选装)安装php-xml:<br> <code>yum install php-xml</code></p></li><li><p>启动php-fpm并设置为开机自启</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service php-fpm start</span><br><span class="line">chkconfig php-fpm on</span><br></pre></td></tr></table></figure></li><li><p>修改nginx配置文件:<br> <code>sudo vi /etc/nginx/nginx.conf</code><br> 在http { } 下添加以下代码:  </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80 default_server;</span><br><span class="line">    server_name  www.david916.com; #修改为自己的域名</span><br><span class="line">    </span><br><span class="line">    root         /usr/share/nginx/html/;</span><br><span class="line"></span><br><span class="line">    # Load configuration files for the default server block.</span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.php index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">        location = /40x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启nginx和php-fpm</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br><span class="line">systemctl restart php-fpm.service</span><br></pre></td></tr></table></figure><p> 此时php环境搭建完成，验证方法：  </p><ol><li>创建一个测试网站:<br><code>sudo vi /usr/share/nginx/html/index.php</code><br>并添加以下代码:<br><code>&lt;?php phpinfo(); ?&gt;</code></li><li>打开网站 域名/index.php ，显示php配置信息则安装正确</li></ol></li></ol><h3 id="安装ftp"><a href="#安装ftp" class="headerlink" title="安装ftp"></a>安装ftp</h3><ol><li><p>安装vsftpd:<br> <code>yum -y install vsftpd</code><br> 查看版本：<code>vsftpd -v</code>  </p></li><li><p>修改ftp配置文件 <code>sudo vi /etc/vsftpd/vsftpd.conf</code> (按需修改):</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=NO #访问目录不限制在主目录下</span><br><span class="line">chroot_list_enable=YES #不限制用户名单</span><br></pre></td></tr></table></figure></li><li><p>配置或关闭SELinux (默认关闭):<br> <code>getsebool -a |grep ftp</code>: 查看SELinux状态</p></li><li><p>配置防火墙:<br> <code>firewall-cmd --permanent --zone=public --add-service=ftp</code><br> <code>firewall-cmd --reload</code></p></li><li><p>启动vsftpd:<br> <code>systemctl start vsftpd</code><br> <code>systemctl enable vsftpd</code>: 设置开机启动</p></li><li><p>管理用户（同linux下增删用户）:<br> <code>useradd 用户名 -d /usr/share/nginx/html -s /sbin/nologin</code>: 新增用户（不能通过shell登录）<br> <code>passwd 用户名</code>: 设置用户密码<br>  <code>userdel -r ftpuser</code>: 删除用户<br> (or: <code>useradd 用户名 -d 访问目录 -s /bin/bash</code>: 允许用户通过shell登录)<br> 注：可通过修改<code>sudo vi /etc/passwd</code>配置用户登录的文件夹  </p></li></ol><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://qizhanming.com/blog/2018/08/06/how-to-install-nginx-on-centos-7" target="_blank" rel="noopener">CentOS 7 下 yum 安装和配置 Nginx</a><br><a href="https://www.jianshu.com/p/055aca089506" target="_blank" rel="noopener">Centos7下Yum安装nginx 和php</a><br><a href="https://www.jianshu.com/p/495a02eb2672" target="_blank" rel="noopener">CentOS7搭建配置Nginx+PHP+MySQL</a><br><a href="https://www.jianshu.com/p/05dc6455b513" target="_blank" rel="noopener">CentOS 7 安装 FTP 服务</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装Nginx服务器&quot;&gt;&lt;a href=&quot;#安装Nginx服务器&quot; class=&quot;headerlink&quot; title=&quot;安装Nginx服务器&quot;&gt;&lt;/a&gt;安装Nginx服务器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加yum源:&lt;br&gt; &lt;code&gt;sudo rpm -i
      
    
    </summary>
    
    
      <category term="Tech" scheme="http://blog.david916.com/categories/Tech/"/>
    
    
      <category term="PHP" scheme="http://blog.david916.com/tags/PHP/"/>
    
      <category term="Nginx" scheme="http://blog.david916.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.david916.com/2019/09/19/hello-world/"/>
    <id>http://blog.david916.com/2019/09/19/hello-world/</id>
    <published>2019-09-19T08:29:34.000Z</published>
    <updated>2019-09-20T12:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>I planned to start this blog several years ago. I actually built a blog with Jekyll two years ago, which didn’t last for a long time due to my busy courses schedule. Recently I guaduated from Northern Arizona University as an exchange student and came back to China on August, 2019. So before I finish my last course and graduate from Jinan University on January 2020, I actually got a couple of months free time, although “free time” is not very accurate because I still need to finish my research project and hopefully I can submit a paper in mid October. I am also applying for grad schools, so I also need to prepare the paperwork and GRE, which I didn’t receive a very good score in my first exam. Meanwhile, I am trying to find a job or internship, so I am also working on Leetcode.</p><p>In this blog, I plan to record and share somethings I’ve learned or I am working on. I see this blog as a conclusion of what I have learned during my four years college life, and a starting point of my career path. I am not sure if anyone will actually notice I have started this blog. If you are reading this, you are very welcome to comment in the comment box below. Currently this blog didn’t have too many content. I will try my best to learn new things and share, so one day maybe if you find something useful in here.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I planned to start this blog several years ago. I actually built a blog with Jekyll two years ago, which didn’t last for a long time due 
      
    
    </summary>
    
    
      <category term="Life" scheme="http://blog.david916.com/categories/Life/"/>
    
    
      <category term="Introduction" scheme="http://blog.david916.com/tags/Introduction/"/>
    
      <category term="随笔" scheme="http://blog.david916.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Blog搭建记录</title>
    <link href="http://blog.david916.com/2019/09/19/Blog%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.david916.com/2019/09/19/Blog搭建记录/</id>
    <published>2019-09-19T08:29:34.000Z</published>
    <updated>2019-12-20T12:13:19.084Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Update-2019-09-19-我已将Blog迁移到Hexo"><a href="#Update-2019-09-19-我已将Blog迁移到Hexo" class="headerlink" title="Update (2019-09-19): 我已将Blog迁移到Hexo"></a>Update (2019-09-19): 我已将Blog迁移到Hexo</h4><p>安装Hexo需要按照Node.js 和 npm，可以通过安装包安装</p><p>完成后执行以下命令安装hexo：</p><p><code>npm install -g hexo-cli</code></p><p>其他命令：</p><p><code>hexo c</code> 清除缓存</p><p><code>hexo g</code> 生成静态文件</p><p><code>hexo d</code> 发布到服务器或github</p><hr><h4 id="原文章（201-09-09）"><a href="#原文章（201-09-09）" class="headerlink" title="原文章（201-09-09）"></a>原文章（201-09-09）</h4><p>建立自己的博客的想法已经有一段时间了，不过之前忙于课业，一直没有实现这个想法。最近接触到Markdown语言，觉得比较简单好用，同时又因为一直到明年秋季读研究生这段时间，个人的时间比较多，想利用这段时间刷下题方便以后找工作，所以开了这个博客，记录下这段时间学习到的东西。</p><p>这个Blog是用Jekyll搭建的，网站是托管在GitHub，我还在考虑是否需要迁移到我自己的服务器，因为目前看来Github在国内的访问速度比较慢，但目前使用Github还是比较方便的，基本上只要把模板fork过去后稍作改动就可以运行。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.jianshu.com/p/9f71e260925d" target="_blank" rel="noopener">Github+Jekyll 搭建个人网站详细教程</a><br><a href="https://blog.csdn.net/ityouknow/article/details/82782963" target="_blank" rel="noopener">技术人如何搭建自己的技术博客</a><br><a href="http://jekyllcn.com/" target="_blank" rel="noopener">Jekyll官方文档</a><br><a href="http://jekyllcn.com/" target="_blank" rel="noopener">免费模板</a><br><a href="http://jekyllthemes.org/themes/Texture-Theme/" target="_blank" rel="noopener">Texture模板(我用的就是这个)</a><br><a href="http://huangxuan.me/" target="_blank" rel="noopener">Hux模板</a><br><a href="http://hechonghua.com/easy-post-jekyll/" target="_blank" rel="noopener">Jekyll更方便的发布文章</a>  </p><h3 id="搭建本地运行环境"><a href="#搭建本地运行环境" class="headerlink" title="搭建本地运行环境"></a>搭建本地运行环境</h3><p>运行Jekyll需要安装Ruby和Python2.7以上版本。本地的运行环境为MacOS 15.0，Python安装比较基础这里就不展示了，下面介绍Ruby的安装流程：</p><ol><li><p>安装GPG2：<br> <code>yum install gnupg2</code><br>(yum是centOS的安装源，如果为Ubuntu则为apt-get，MacOS则可使用homebrew)</p></li><li><p>安装rvm (地址：<a href="http://rvm.io/)：" target="_blank" rel="noopener">http://rvm.io/)：</a>  </p><p> <code>gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E37D2BAF1CF37B13E2069D6956105BD0E739499BDB</code><br> <code>\curl -sSL https://get.rvm.io | bash -s stable</code><br> <code>source ~/rvm/scripts/rvm</code>  </p></li><li><p>安装ruby：<br> <code>rvm install ruby --head</code>  </p><p> 至此ruby和ruby gem安装完成<br> 检查ruby版本命令：<code>ruby -v</code><br> 检查gem版本命令：<code>gem -v</code></p></li><li><p>安装Jekyll：<br> <code>gem install jekyll</code></p></li></ol><p>环境安装完成后，terminal进入下载好的模板，按照模板的文档设置好模板后，运行<code>jekyll serve</code>命令，即可在浏览器中访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 预览网站效果</p><p>假如模板是从GitHub clone到本地，任何改动push回GitHub后，即可通过<a href="https://fssongwei.github.io" target="_blank" rel="noopener">https://fssongwei.github.io</a> 访问网站</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Update-2019-09-19-我已将Blog迁移到Hexo&quot;&gt;&lt;a href=&quot;#Update-2019-09-19-我已将Blog迁移到Hexo&quot; class=&quot;headerlink&quot; title=&quot;Update (2019-09-19): 我已将Blog
      
    
    </summary>
    
    
      <category term="Tech" scheme="http://blog.david916.com/categories/Tech/"/>
    
    
      <category term="Hexo" scheme="http://blog.david916.com/tags/Hexo/"/>
    
      <category term="Jekyll" scheme="http://blog.david916.com/tags/Jekyll/"/>
    
      <category term="Github" scheme="http://blog.david916.com/tags/Github/"/>
    
  </entry>
  
</feed>
