{"meta":{"title":"David's Blog","subtitle":"Eat, Sleep, Code, Repeat","description":"Developer. Computer & Information Science Graduate Student @ Cornell.","author":"Wei Song","url":"http://blog.david916.com","root":"/"},"pages":[{"title":"","date":"2020-07-16T15:30:02.922Z","updated":"2019-09-19T08:53:01.000Z","comments":false,"path":"categories/index.html","permalink":"http://blog.david916.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-07-16T15:31:38.588Z","updated":"2019-09-19T11:43:19.000Z","comments":false,"path":"tags/index.html","permalink":"http://blog.david916.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Youtube Shuffle","slug":"Youtube Shuffle","date":"2020-07-29T11:40:22.751Z","updated":"2020-07-31T08:56:18.216Z","comments":true,"path":"2020/07/29/Youtube Shuffle/","link":"","permalink":"http://blog.david916.com/2020/07/29/Youtube Shuffle/","excerpt":"","text":"IntroductionYoutube shuffle is a React app using Youtube Data API. It has a personalized user interface which allows users to search a Youtube video and play it. It also includes a shuffle function, which the program will randomly generated a keyword and presents the related videos from Youtube. Youtube Shuffle.png Source Code Technologies and libraries using in this project are listing below: Front-end Library: React UI Library: MDUI APIs: Youtube Data API v3 Other Libraries: Faker.js (to generate random keywords) This project was bootstrapped with Create React App. Available ScriptsIn the project directory, you can run: npm startRuns the app in the development mode.Open http://localhost:3000 to view it in the browser. The page will reload if you make edits.You will also see any lint errors in the console. npm testLaunches the test runner in the interactive watch mode.See the section about running tests for more information. npm run buildBuilds the app for production to the build folder.It correctly bundles React in production mode and optimizes the build for the best performance. The build is minified and the filenames include the hashes.Your app is ready to be deployed! See the section about deployment for more information. npm run ejectNote: this is a one-way operation. Once you eject, you can’t go back! If you aren’t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project. Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own. You don’t have to ever use eject. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it. Learn MoreYou can learn more in the Create React App documentation. To learn React, check out the React documentation. Code SplittingThis section has moved here: https://facebook.github.io/create-react-app/docs/code-splitting Analyzing the Bundle SizeThis section has moved here: https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size Making a Progressive Web AppThis section has moved here: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app Advanced ConfigurationThis section has moved here: https://facebook.github.io/create-react-app/docs/advanced-configuration DeploymentThis section has moved here: https://facebook.github.io/create-react-app/docs/deployment npm run build fails to minifyThis section has moved here: https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://blog.david916.com/tags/Javascript/"},{"name":"React","slug":"React","permalink":"http://blog.david916.com/tags/React/"}]},{"title":"Yelp Camp - A full-stack Node.js Web Application Project","slug":"Yelp Camp - A full-stack Node.js Web Application Project","date":"2020-07-19T09:35:53.138Z","updated":"2020-07-19T11:27:00.820Z","comments":true,"path":"2020/07/19/Yelp Camp - A full-stack Node.js Web Application Project/","link":"","permalink":"http://blog.david916.com/2020/07/19/Yelp Camp - A full-stack Node.js Web Application Project/","excerpt":"","text":"IntroductionYelp Camp is a Yelp-like node.js web app. It’s the final course project of the Web Develop Bootcamp course in Udemy. Users and campground owners can upload their campground information to the website, and other users can leave a comment to the campground. Live DemoSource Code The app is built on Node.js with Express. Other technologies and library using in this project are listing below: UI Library: Bootstrap Database: MongoDB, Mongoose Authentication: passport.js, bcrypt, express-session, express-flash Updates2020.7.19 Version 1.0 Front-end development with HTML/CSS/JS and Bootstrap 4 Back-end development with Node.js and Express Built user login and register system with Passport.js Developed Posts module and Comments module To-do ListOther features comming. If you have any idea, send email to ws446@cornell.edu Fuzzy Search Campground location with Google Maps User profile Password reset Image upload with multer and cloudinary Payment with Stripe API Ratings Pagination in campgrounds index Demo mainpage.png camppage.png","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://blog.david916.com/tags/Nodejs/"},{"name":"Express","slug":"Express","permalink":"http://blog.david916.com/tags/Express/"},{"name":"Bootstrap","slug":"Bootstrap","permalink":"http://blog.david916.com/tags/Bootstrap/"}]},{"title":"Dwitter - A Twitter-like Social Media App","slug":"Dwitter - A Twitter-like Social Media App","date":"2020-07-16T23:17:00.000Z","updated":"2020-07-19T11:26:48.150Z","comments":true,"path":"2020/07/17/Dwitter - A Twitter-like Social Media App/","link":"","permalink":"http://blog.david916.com/2020/07/17/Dwitter - A Twitter-like Social Media App/","excerpt":"","text":"IntroductionDwitter is a Twitter-like social media web app written in Javascript. The name “Dwitter” stands for “David’s Twitter”. Users can post their thoughs, follow other user, comment and like other user’s posts. Live DemoSource Code The app is built on Node.js with Express. Other technologies and library using in this project are listing below: UI Library: MDUI Database: MongoDB, Mongoose Authentication: passport.js, bcrypt, express-session, express-flash Updates2020.7.16 Version 1.0(The app is officially for public testing) Improve UI with MDUI (Material Design UI) Add following &amp; unfollowing features Add like &amp; unlike features Implement express-flash to show flash message 2020.7.15 Authentication with passport.js Refactor the code 2020.7.14 Initialize the project by setting up the routers and database models Add Basic UI with HTML &amp; CSS Add posts &amp; comments create and delete features To-do ListOther features comming. If you have any idea, send email to ws446@cornell.edu Implement photo library for user to upload their photos Display the number of favorite for each post Implement google / facebook login User can change their own avatars Routers refactor Demo","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://blog.david916.com/tags/Nodejs/"},{"name":"Express","slug":"Express","permalink":"http://blog.david916.com/tags/Express/"},{"name":"Javascript","slug":"Javascript","permalink":"http://blog.david916.com/tags/Javascript/"}]},{"title":"Web Develop Bootcamp Front-end Projects","slug":"Web Develop Bootcamp Front-end Projects","date":"2020-06-21T22:22:00.000Z","updated":"2020-07-19T12:13:44.636Z","comments":true,"path":"2020/06/22/Web Develop Bootcamp Front-end Projects/","link":"","permalink":"http://blog.david916.com/2020/06/22/Web Develop Bootcamp Front-end Projects/","excerpt":"","text":"Below are some of the web developer bootcamp course projects. All of them are purely front-end app with only HTML / CSS / Javascript Source Code Color Guessing GameThe game will give an RGB value and some squares fill with different color. The player choose the correct color square that matches the given RGB value wins. There are three difficulty level to choose. The game also includes a statistics function to calculate the correct rate of the player. colorGame.png Demo To-Do ListThis tool allows user to keep track of their daily tasks. User can update a task, mark it as completed, or delete a task. TodoList.png Demo PatatapPatatap is a fun music game. User can type any key on their keyborad and the game will play different sounds and show animated circle on the screen with different colors. Several javacript library are included in this project, includes JQuery, Paper.js and Howler.js Demo","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://blog.david916.com/tags/Javascript/"},{"name":"HTML","slug":"HTML","permalink":"http://blog.david916.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://blog.david916.com/tags/CSS/"}]},{"title":"GPU Accelerated Similarity Self-join","slug":"GPU Accelerated Similarity Self-join","date":"2019-12-20T11:49:08.321Z","updated":"2020-07-20T15:10:05.722Z","comments":true,"path":"2019/12/20/GPU Accelerated Similarity Self-join/","link":"","permalink":"http://blog.david916.com/2019/12/20/GPU Accelerated Similarity Self-join/","excerpt":"","text":"IntroductionThe similarity self-join is an operation that finds all objects in a dataset within a distance threshold of each other. A typical method for the self-join is to utilize the search-and-refine strategy: search a set of candidate points that may be within the search radius for every query point, and then refine them by performing the distance calculations. Numerous searches for points within the search distance take advantage of the GPU’s high memory bandwidth and massive parallelism. Thus, the GPU’s architecture is suitable for massively parallel range queries and join operations. OptimizationThere are many ways for points indexing, divided into two categories: Tree-based indexes (such as R-trees, quad-trees and kd-trees), and non-hierarchical indexes (such as Grids, see Figure 1). Due to the GPU’s SIMT architecture, tree indexes cause divergence in workload among the groups of threads in GPU call warp, so the total performance is depend on the threads in a warp that needs the longest time. On the other hands, each thread performs similar execution pathways in Grid structure. However, we may still have various number of points in different cells in a grid, which is also not very efficient in SIMT architecture. Figure 1 (Figure 1: An example of grid indexing structure in 2D. We want to find all the points that are within ε with point p (the point in the circle area). In order to do that, we use the grid index structure so every point are within a grid cell. Then we search all the points in the cells adjacents to the cell that contains p (nine cells in the large square bounded by the dash line) to limit the search area. After we find all the points, we verify each point by performing distance calculations (in here we use Euclidean metric), to see if the point are within the circle) Our goal is to minimize the divergence of workload among each threads. To achieve that, we utilize the grid structure, improve it and develop another two grid-base indexing methods. We also extract the feature of datasets to determin which grid indexes we should use, in order to maximize the performance. We have run experiments on differents datasets, synthetic or real-world, and our method generally has better performance, with up to 20x speedup compare to a CPU implementation and up to 5.5x speedup compare to another state-of-art GPU implementation (See Figure 2). Figure 2 (Figure 2: (a) compared with another CPU self-join implementation call SuperEgo and (b) compare to another GPU self-join implementation call GPUCalcGlobal. Datasets are from 2D to 8D. The red lines show the average speedup 6.0x and 2.0x, and the black dash line shows where our approach achieves a speedup (or slowdown)). We are currently improving our optimization methods and drafting the related outcomes. To be continued …","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"GPU","slug":"GPU","permalink":"http://blog.david916.com/tags/GPU/"},{"name":"Research","slug":"Research","permalink":"http://blog.david916.com/tags/Research/"},{"name":"Parallel Computing","slug":"Parallel-Computing","permalink":"http://blog.david916.com/tags/Parallel-Computing/"}]},{"title":"Prototype Time Limited Dispatch (TLD) Application","slug":"Prototype Time Limited Dispatch (TLD) Application","date":"2019-03-03T19:04:00.000Z","updated":"2020-07-21T04:50:09.615Z","comments":true,"path":"2019/03/04/Prototype Time Limited Dispatch (TLD) Application/","link":"","permalink":"http://blog.david916.com/2019/03/04/Prototype Time Limited Dispatch (TLD) Application/","excerpt":"","text":"For more details, visits the project website &amp; Github Repo Updatesv2.1 (03/04/2019) Updated chart view: now you can choose the data you want to make a chart for it v2.0 (02/26/2019) New GUI design Add menu for multiple planes data access Two view modes: the table view and the chart view Real-time data updating and parsing Rawdata file can be download directly v1.1 (12/08/2018) Bug Fix: Fix the csrf verification issue when user click on the return key. v1.0 (12/07/2018) Release for tech demo Finished the implementation of Django, include the user authencation, database connection and data integrity verification by hash value Description Honeywell Aerospace is a leading manufacturer of all sorts of aircraft engines ranging from helicopters to commercial airliners. These engines and their connected systems generate data every flight that is important for the functionality of their product. While in flight, an engine is constantly reading sensor data and storing it on the onboard computer called the Engine Control Unit (ECU). Currently, to gather this data, a technician will physically download the data from the ECU through a wire connection. The cumbersome process of physically connecting to a computer and downloading this data on location greatly limits the amount of flight data to collect. Our team, TLD Worker Bee, are working on the project Prototype Time Limited Dispatch (TLD) Application for our sponsor, Harlan Mitchell from Honeywell Aerospace. The initial concept for this project was provided by our sponsor, in the form of a Capstone project proposal. Our prototype is a web app that uses an internet connection to connect to the data stored in the cloud for a completely wireless experience. It verifies data integrity before showing the user any data to avoid reading false data. This ensures the mechanic knows exactly what maintenance to perform on the engine from anywhere in the world. RequirementsFor our requirements acquisition process, we began by brainstorming different use cases for our product to see how a typical user might interact with our system. We were able to come up with a few requirements of our own, but we wanted our sponsor’s opinion on what requirements he felt our system should have as well. We spoke to our sponsor, Harlan Mitchell, about what he would like to see in our final product and how he would like the final product to perform. We explained to him our proposed solution and what we had in mind to fix his problem, and he explained how our proposed solution needs to perform. From this discussion, we gathered a handful of functional and non-functional requirements. Our functional requirements are as follows: [F-SYS1] The web viewer tool shall download the raw data file from the cloud to the user’s computer upon user’s request. [F-SYS2] The web viewer tool shall display the data stored in the database. [F-GUI1] The user shall navigate to data by plane tail number. [F-GUI2] The GUI shall be adaptive for PCs and tablets using Google Chrome. Note: Adaptive means the user will see the data without needing to side scroll. These functional requirements describe how the system is expected to function; they cover both system requirements and GUI requirements. Our non-functional or performance requirements are as follows: [P-GUI3] The web viewer tool shall display data onto the web page after receiving it from the cloud. [P-DT1] The database shall reject SQL injection 100% of the time. [P-SYS3] The web viewer tool shall explicitly validate the data after receiving it from the cloud before displaying it on the web browser. This validation will be done by comparing local and cloud MD5 hash values for the data. These non-functional requirements describe benchmark goals for the system; they cover system, GUI, and database requirements. SolutionThe solution our team has in mind to build for our sponsor is a prototype web application that will serve as a viewing tool for data that is stored in a cloud. The web application will be able to download the data files a user is requesting from the cloud and display them in the web browser of choice. The web viewing tool we build will be usable on Google Chrome and Apple Safari. We have three main components that will each serve a purpose in our solution: cloud storage, parsing and verification services, and a web application. The cloud storage contains the databases for this prototype: one to store data for processing and one to store data that is already processed. These databases communicate with each other using Python to perform operations on the pre-processed data. We will be using Amazon S3 cloud storage to hold the database containing the pre-processed data and Amazon RDS to hold the database containing the processed data. The RDS database is the one that will be accessed when a user makes a data request in the web application. Before the data reaches the web application, it will be sent through a parsing and a verification tool. These tools/services will ensure data integrity throughout the data flow process. For the web application itself, we will be using Django and Python to create a web page to display data that a user requests from the database. This flow of data can be seen below in figure 1. The data starts by being collected from the ECU and is then sent to the Amazon S3 cloud database. From there, the data is sent through a parsing tool for data processing and is then sent to the Amazon RDS database. Once the user makes a request for data, it is passed through a verification tool before it is displayed to the user in the web application. The components discussed above will be used to create software that adheres to the Model View Presenter (MVP) model, a key part of which is that data is handled and represented in three separate layers. These layers are as follows: Database Layer: where the data used by the software is stored(Model) Presentation Layer: where the data used by the software is displayed(View) Service Layer: where the data used by the software is parsed and verified.(Presenter) This separation of responsibilities surrounding the data into separate layers ensures a level of security with data parsing and makes sure that the data that is displayed is accurate. This configuration is shown in figure 2. Here are two data view modes to display the TLD data: Table ViewThe table view mode is able to provide an organized way to arrange and display the TLD data by using easy-to-read table and grid structure. Chart ViewThe chart view mode allows the user to plot the specific TLD data, and generate the line chart of that data to help the user analyze the properties and tendency of the specific TLD data. TechnologyHere are some technologies and services we choose for this project: Python Environment Python 3.6 (Python is an interpreted, high-level, general-purpose programming language. All the program and components of this project is written in Python) Django 2.2.1 (Django is a high-level Python Web framework. This is the basic of the web application.) - Pip (Package manager for Python. Use it to install other python components or libraries like Virtualenv, awsebcli and Urllib3) Virtualenv (Python Virtual Environment. By using a virtual environment, you can discern exactly which packages are needed by your application so that the required packages are installed on the AWS instances that are running your application.) Awsebcli (Elastic Beanstalk Command Line Interface (EB CLI). This is used to initialize your application with the files necessary for deploying with Elastic Beanstalk.) Urllib3 (urllib3 is a powerful, sanity-friendly HTTP client for Python. We use it to transfer the raw TLD data from the cloud to the local environment) Cloud &amp; Database Services Amazon AWS S3 (Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance. This is the simulated cloud environment for this project.) Amazon RDS (Amazon RDS is easy to set up, operate, and scale a relational database in the cloud.)- Amazon Elastic Beanstalk (AWS Elastic Beanstalk is an easy-to-use service for deploying and scaling web applications and services developed with Java, .NET, PHP, Node.js, Python, Ruby, Go, and Docker on familiar servers such as Apache, Nginx, Passenger, and IIS.) MySQL 5.1 (MySQL is a relational database management system. We use MySQL to manage the database)- Sequel Pro (Sequel Pro is a fast, easy-to-use Mac database management application for working with MySQL databases.) MySQL Workbench (MySQL Workbench is a visual database design tool) Code Editor &amp; IDE Sublime Text 3 (Sublime Text is a proprietary cross-platform source code editor with a Python API. It’s easy to develop code with Sublime Text 3) vim (Vim is a highly configurable text editor built to enable efficient text editing.)","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Django","slug":"Django","permalink":"http://blog.david916.com/tags/Django/"},{"name":"Python","slug":"Python","permalink":"http://blog.david916.com/tags/Python/"},{"name":"AWS","slug":"AWS","permalink":"http://blog.david916.com/tags/AWS/"}]},{"title":"Predictions and Countermeasures for the Opioid Crisis with Socio-Economic Factors","slug":"Predictions and Countermeasures for the Opioid Crisis with Socio-Economic Factors","date":"2019-01-28T17:29:00.000Z","updated":"2020-07-20T16:55:43.012Z","comments":true,"path":"2019/01/29/Predictions and Countermeasures for the Opioid Crisis with Socio-Economic Factors/","link":"","permalink":"http://blog.david916.com/2019/01/29/Predictions and Countermeasures for the Opioid Crisis with Socio-Economic Factors/","excerpt":"","text":"SummaryThis project is for the 35th annual Mathematical Contest in Modeling, which won the Honorable Mention amount 16% of the 14,108 participant teams. Full Final ReportSource CodeCertificate In this project, we developed a set of data analyses to determine the opioids source-locations in Ohio, Pennsylvania, Virginia, West Virginia, and Kentucky, to predict the opioids con- sumption trends in years up to 2027, to determine the strongest socio-economic factors that influenced the opioids consumptions trends, and to propose a countermeasure that would possibly ease the Opioid Crisis. First, we processed the data from the drug identification counts by eliminating redun- dant data and by filling the missing data. We chose data values under “Percent” for our future models, because they are the most representative in analyzing opioids consump- tion. We filled the missing data by applying the curve fitting and cubic spline methods to data missing between 20%-50% and under 20%, respectively. Second, with our processed data, we analyzed the locations of the most probable opioid source by utilizing the Bayesian Networks with distance as the determining factor. Graphs representing the locations of several sources are plotted. We then proceed to predict the trends of the top four opioids consumption amount and percentage with Grey Box model. We give a detailed and concise analysis of the opioids types trend. Third, we took account of the impact of major socio-economic factors in opioid con- sumption by increasing efficiency with Principal Component Analysis and by upgrading the previous Grey Box prediction with Vector Autoregression (VAR). VAR allowed us to take account of the socio-economic factors along with the data in opioids consumption in 2010-2017. Last, we proposed that disability is a major factor in determining the opioid con- sumption trend. We performed the VAR with a decreasing factor of 1% each year and observed positive result confirming our proposal. In conclusion, we suggest funding for institutions with opioids rehabilitation as a countering measure against the opioid crisis. We also discussed about the significant parameters that bounds the success and failures of our models, as well as the strengths and weaknesses of our models.","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"R","slug":"R","permalink":"http://blog.david916.com/tags/R/"},{"name":"Research","slug":"Research","permalink":"http://blog.david916.com/tags/Research/"},{"name":"Data Science","slug":"Data-Science","permalink":"http://blog.david916.com/tags/Data-Science/"}]},{"title":"Android Tetris","slug":"Android Tetris","date":"2017-12-06T04:06:00.000Z","updated":"2020-07-20T15:43:38.467Z","comments":true,"path":"2017/12/06/Android Tetris/","link":"","permalink":"http://blog.david916.com/2017/12/06/Android Tetris/","excerpt":"","text":"IntroductionThis is the course project of CS 399 Moblie Application Development. Our final solutions include: Tile rotation and speeding Tile elimination when rows are filled Sound feedback &amp; Background music Final score calculation Speed up the tile falling speed with different difficulty levels Colorful design Source Code Updates2017.12.06 Version 1.0 Final product delievery Demo","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.david916.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://blog.david916.com/tags/Android/"}]},{"title":"iBuy - A Shopping List Android App","slug":"iBuy Shopping List Android App","date":"2017-11-15T03:15:00.000Z","updated":"2020-07-20T16:15:23.450Z","comments":true,"path":"2017/11/15/iBuy Shopping List Android App/","link":"","permalink":"http://blog.david916.com/2017/11/15/iBuy Shopping List Android App/","excerpt":"","text":"IntroductioniBuy is a shopping list Android application. It allows users to list the items they want to buy, marked the price, amount and urgent level of each item, and share your shopping list within a group (family, friend, etc). A household goes through tons of “consumables”: food, toilet paper, laundry detergent, you name it. It is a huge challenge for households to track and manage these daily needs. Though various household members are moving around the city all day — and could potentially make efficient on-the-way purchases — in reality, no one knows or can remember what needs to be purchased and who is supposed to purchase it. Which means wasted time, extra trips to the store for one item, and general frustration about eating dry cereal, washing your hair with facial soap, and wiping your bottom with paper towels. We’ve all been there. Or worse yet, multiple people remember to buy and you end up with 400 rolls of toilet paper. iBuy will solve this problem forever. Source Code Updates2017.11.15 Version 1.0 Final product delievery Demo Register.png AddItem1.png AddItem2.png ShoppingList.png Account.png Group.png Copyright.png","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.david916.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://blog.david916.com/tags/Android/"}]},{"title":"Anagram Game","slug":"Anagram Game","date":"2017-10-11T02:11:00.000Z","updated":"2020-07-31T08:55:13.766Z","comments":true,"path":"2017/10/11/Anagram Game/","link":"","permalink":"http://blog.david916.com/2017/10/11/Anagram Game/","excerpt":"","text":"IntroductionThis is the course project of CS 399 Moblie Application Development. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the word anagram can be rearranged into nag a ram, or the word binary into brainy or the word adobe into abode. This android game has 3 different difficulty levels. The game will provide a word and the player will need to enter the correct anagram in order to continue the game. The length of the word will increase with the difficulty of the game. Once the players finish all questions, the game will show a result page with info like the correct rate. Source Code Updates2017.10.10 Version 1.0 Designed and implemented the UI of the game Implemented the game logic and a questions library. Demo main.jpg game.png info.png","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.david916.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://blog.david916.com/tags/Android/"}]},{"title":"Android Calculator App","slug":"Android Calculator App","date":"2017-10-10T02:10:00.000Z","updated":"2020-07-20T15:13:18.768Z","comments":true,"path":"2017/10/10/Android Calculator App/","link":"","permalink":"http://blog.david916.com/2017/10/10/Android Calculator App/","excerpt":"","text":"IntroductionThis is the course project of CS 399 Moblie Application Development. The goal of this project is to develop a calculator android application that provides basic calculation functions like add, subtract, multiply, divide, square root, and percentage. The app has a simple user interface and sounds effect when users click on the button. When first we start to design this app, we try to use the GridLayout to implement the UI of this application. But the problem is the GridLayout in Android is kind of a new thing, which only supports the larger size of the screens. While we try to implement this in a smaller size screen, all of the components went outside of the screen and there is no solution on the internet to solve this problem. Finally, after some research, we decide to use the Tablelayout, which is more flexible to different kinds of devices and reduces the complication of the UI code. It is also flexible in both vertical and landscape views. The whole color design is inspired by the calculator design of the iOS original calculator application. For the division function, it requires the second parameter not to be 0, otherwise, it will throw an error and play the error sound. Another issue is to keep the calculation continuously while we keep pressing the operator button after we got a result. When we first calculate a result, we will store it into a variable and use it as the first parameter of the next calculation. Besides, due to the different sizes of the screens of the devices, we had to limit the digits of the number less than 10. If the digits of the calculation result are greater than 10, we will use the scientific notation to represent the result. APK DownloadSource Code Updates2017.10.10 Version 1.0 Designed and implemented the user interface of the calculator app Developed the calculator function, such as addition, substraction, multiplication and division. Demo","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.david916.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://blog.david916.com/tags/Android/"}]}]}