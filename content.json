{"meta":{"title":"David's Blog","subtitle":"Eat, Sleep, Code, Repeat","description":"Developer. Computer & Information Science Graduate Student @ Cornell.","author":"Wei Song","url":"http://blog.david916.com","root":"/"},"pages":[{"title":"","date":"2020-07-16T15:30:02.922Z","updated":"2019-09-19T08:53:01.000Z","comments":false,"path":"categories/index.html","permalink":"http://blog.david916.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-07-16T15:31:38.588Z","updated":"2019-09-19T11:43:19.000Z","comments":false,"path":"tags/index.html","permalink":"http://blog.david916.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Yelp Camp - A full-stack Node.js Web Application Project","slug":"Yelp Camp - A full-stack Node.js Web Application Project","date":"2020-07-19T09:35:53.138Z","updated":"2020-07-19T11:27:00.820Z","comments":true,"path":"2020/07/19/Yelp Camp - A full-stack Node.js Web Application Project/","link":"","permalink":"http://blog.david916.com/2020/07/19/Yelp Camp - A full-stack Node.js Web Application Project/","excerpt":"","text":"IntroductionYelp Camp is a Yelp-like node.js web app. It’s the final course project of the Web Develop Bootcamp course in Udemy. Users and campground owners can upload their campground information to the website, and other users can leave a comment to the campground. Live DemoSource Code The app is built on Node.js with Express. Other technologies and library using in this project are listing below: UI Library: Bootstrap Database: MongoDB, Mongoose Authentication: passport.js, bcrypt, express-session, express-flash Updates2020.7.19 Version 1.0 Front-end development with HTML/CSS/JS and Bootstrap 4 Back-end development with Node.js and Express Built user login and register system with Passport.js Developed Posts module and Comments module To-do ListOther features comming. If you have any idea, send email to ws446@cornell.edu Fuzzy Search Campground location with Google Maps User profile Password reset Image upload with multer and cloudinary Payment with Stripe API Ratings Pagination in campgrounds index Demo mainpage.png camppage.png","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://blog.david916.com/tags/Nodejs/"},{"name":"Express","slug":"Express","permalink":"http://blog.david916.com/tags/Express/"},{"name":"Bootstrap","slug":"Bootstrap","permalink":"http://blog.david916.com/tags/Bootstrap/"}]},{"title":"Dwitter - A Twitter-like Social Media App","slug":"Dwitter - A Twitter-like Social Media App","date":"2020-07-16T23:17:00.000Z","updated":"2020-07-19T11:26:48.150Z","comments":true,"path":"2020/07/17/Dwitter - A Twitter-like Social Media App/","link":"","permalink":"http://blog.david916.com/2020/07/17/Dwitter - A Twitter-like Social Media App/","excerpt":"","text":"IntroductionDwitter is a Twitter-like social media web app written in Javascript. The name “Dwitter” stands for “David’s Twitter”. Users can post their thoughs, follow other user, comment and like other user’s posts. Live DemoSource Code The app is built on Node.js with Express. Other technologies and library using in this project are listing below: UI Library: MDUI Database: MongoDB, Mongoose Authentication: passport.js, bcrypt, express-session, express-flash Updates2020.7.16 Version 1.0(The app is officially for public testing) Improve UI with MDUI (Material Design UI) Add following &amp; unfollowing features Add like &amp; unlike features Implement express-flash to show flash message 2020.7.15 Authentication with passport.js Refactor the code 2020.7.14 Initialize the project by setting up the routers and database models Add Basic UI with HTML &amp; CSS Add posts &amp; comments create and delete features To-do ListOther features comming. If you have any idea, send email to ws446@cornell.edu Implement photo library for user to upload their photos Display the number of favorite for each post Implement google / facebook login User can change their own avatars Routers refactor Demo","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://blog.david916.com/tags/Nodejs/"},{"name":"Express","slug":"Express","permalink":"http://blog.david916.com/tags/Express/"},{"name":"Javascript","slug":"Javascript","permalink":"http://blog.david916.com/tags/Javascript/"}]},{"title":"Web Develop Bootcamp Front-end Projects","slug":"Web Develop Bootcamp Front-end Projects","date":"2020-06-21T22:22:00.000Z","updated":"2020-07-19T12:13:44.636Z","comments":true,"path":"2020/06/22/Web Develop Bootcamp Front-end Projects/","link":"","permalink":"http://blog.david916.com/2020/06/22/Web Develop Bootcamp Front-end Projects/","excerpt":"","text":"Below are some of the web developer bootcamp course projects. All of them are purely front-end app with only HTML / CSS / Javascript Source Code Color Guessing GameThe game will give an RGB value and some squares fill with different color. The player choose the correct color square that matches the given RGB value wins. There are three difficulty level to choose. The game also includes a statistics function to calculate the correct rate of the player. colorGame.png Demo To-Do ListThis tool allows user to keep track of their daily tasks. User can update a task, mark it as completed, or delete a task. TodoList.png Demo PatatapPatatap is a fun music game. User can type any key on their keyborad and the game will play different sounds and show animated circle on the screen with different colors. Several javacript library are included in this project, includes JQuery, Paper.js and Howler.js Demo","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://blog.david916.com/tags/Javascript/"},{"name":"HTML","slug":"HTML","permalink":"http://blog.david916.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://blog.david916.com/tags/CSS/"}]},{"title":"GPU Accelerated Similarity Self-join","slug":"GPU Accelerated Similarity Self-join","date":"2019-12-20T11:49:08.321Z","updated":"2020-07-20T15:10:05.722Z","comments":true,"path":"2019/12/20/GPU Accelerated Similarity Self-join/","link":"","permalink":"http://blog.david916.com/2019/12/20/GPU Accelerated Similarity Self-join/","excerpt":"","text":"IntroductionThe similarity self-join is an operation that finds all objects in a dataset within a distance threshold of each other. A typical method for the self-join is to utilize the search-and-refine strategy: search a set of candidate points that may be within the search radius for every query point, and then refine them by performing the distance calculations. Numerous searches for points within the search distance take advantage of the GPU’s high memory bandwidth and massive parallelism. Thus, the GPU’s architecture is suitable for massively parallel range queries and join operations. OptimizationThere are many ways for points indexing, divided into two categories: Tree-based indexes (such as R-trees, quad-trees and kd-trees), and non-hierarchical indexes (such as Grids, see Figure 1). Due to the GPU’s SIMT architecture, tree indexes cause divergence in workload among the groups of threads in GPU call warp, so the total performance is depend on the threads in a warp that needs the longest time. On the other hands, each thread performs similar execution pathways in Grid structure. However, we may still have various number of points in different cells in a grid, which is also not very efficient in SIMT architecture. Figure 1 (Figure 1: An example of grid indexing structure in 2D. We want to find all the points that are within ε with point p (the point in the circle area). In order to do that, we use the grid index structure so every point are within a grid cell. Then we search all the points in the cells adjacents to the cell that contains p (nine cells in the large square bounded by the dash line) to limit the search area. After we find all the points, we verify each point by performing distance calculations (in here we use Euclidean metric), to see if the point are within the circle) Our goal is to minimize the divergence of workload among each threads. To achieve that, we utilize the grid structure, improve it and develop another two grid-base indexing methods. We also extract the feature of datasets to determin which grid indexes we should use, in order to maximize the performance. We have run experiments on differents datasets, synthetic or real-world, and our method generally has better performance, with up to 20x speedup compare to a CPU implementation and up to 5.5x speedup compare to another state-of-art GPU implementation (See Figure 2). Figure 2 (Figure 2: (a) compared with another CPU self-join implementation call SuperEgo and (b) compare to another GPU self-join implementation call GPUCalcGlobal. Datasets are from 2D to 8D. The red lines show the average speedup 6.0x and 2.0x, and the black dash line shows where our approach achieves a speedup (or slowdown)). We are currently improving our optimization methods and drafting the related outcomes. To be continued …","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"GPU","slug":"GPU","permalink":"http://blog.david916.com/tags/GPU/"},{"name":"Research","slug":"Research","permalink":"http://blog.david916.com/tags/Research/"},{"name":"Parallel Computing","slug":"Parallel-Computing","permalink":"http://blog.david916.com/tags/Parallel-Computing/"}]},{"title":"Predictions and Countermeasures for the Opioid Crisis with Socio-Economic Factors","slug":"Predictions and Countermeasures for the Opioid Crisis with Socio-Economic Factors","date":"2019-01-28T17:29:00.000Z","updated":"2020-07-20T16:45:51.053Z","comments":true,"path":"2019/01/29/Predictions and Countermeasures for the Opioid Crisis with Socio-Economic Factors/","link":"","permalink":"http://blog.david916.com/2019/01/29/Predictions and Countermeasures for the Opioid Crisis with Socio-Economic Factors/","excerpt":"","text":"SummaryThis project is for the 35th annual Mathematical Contest in Modeling, which won the Honorable Mention amount 16% of the 14,108 participant teams. Full Final ReportSource CodeCertificate In this project, we developed a set of data analyses to determine the opioids source-locations in Ohio, Pennsylvania, Virginia, West Virginia, and Kentucky, to predict the opioids con- sumption trends in years up to 2027, to determine the strongest socio-economic factors that influenced the opioids consumptions trends, and to propose a countermeasure that would possibly ease the Opioid Crisis. First, we processed the data from the drug identification counts by eliminating redun- dant data and by filling the missing data. We chose data values under “Percent” for our future models, because they are the most representative in analyzing opioids consump- tion. We filled the missing data by applying the curve fitting and cubic spline methods to data missing between 20%-50% and under 20%, respectively. Second, with our processed data, we analyzed the locations of the most probable opioid source by utilizing the Bayesian Networks with distance as the determining factor. Graphs representing the locations of several sources are plotted. We then proceed to predict the trends of the top four opioids consumption amount and percentage with Grey Box model. We give a detailed and concise analysis of the opioids types trend. Third, we took account of the impact of major socio-economic factors in opioid con- sumption by increasing efficiency with Principal Component Analysis and by upgrading the previous Grey Box prediction with Vector Autoregression (VAR). VAR allowed us to take account of the socio-economic factors along with the data in opioids consumption in 2010-2017. Last, we proposed that disability is a major factor in determining the opioid con- sumption trend. We performed the VAR with a decreasing factor of 1% each year and observed positive result confirming our proposal. In conclusion, we suggest funding for institutions with opioids rehabilitation as a countering measure against the opioid crisis. We also discussed about the significant parameters that bounds the success and failures of our models, as well as the strengths and weaknesses of our models.","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Research","slug":"Research","permalink":"http://blog.david916.com/tags/Research/"},{"name":"R","slug":"R","permalink":"http://blog.david916.com/tags/R/"},{"name":"Data Science","slug":"Data-Science","permalink":"http://blog.david916.com/tags/Data-Science/"}]},{"title":"Android Tetris","slug":"Android Tetris","date":"2017-12-06T04:06:00.000Z","updated":"2020-07-20T15:43:38.467Z","comments":true,"path":"2017/12/06/Android Tetris/","link":"","permalink":"http://blog.david916.com/2017/12/06/Android Tetris/","excerpt":"","text":"IntroductionThis is the course project of CS 399 Moblie Application Development. Our final solutions include: Tile rotation and speeding Tile elimination when rows are filled Sound feedback &amp; Background music Final score calculation Speed up the tile falling speed with different difficulty levels Colorful design Source Code Updates2017.12.06 Version 1.0 Final product delievery Demo","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.david916.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://blog.david916.com/tags/Android/"}]},{"title":"iBuy - A Shopping List Android App","slug":"iBuy Shopping List Android App","date":"2017-11-15T03:15:00.000Z","updated":"2020-07-20T16:15:23.450Z","comments":true,"path":"2017/11/15/iBuy Shopping List Android App/","link":"","permalink":"http://blog.david916.com/2017/11/15/iBuy Shopping List Android App/","excerpt":"","text":"IntroductioniBuy is a shopping list Android application. It allows users to list the items they want to buy, marked the price, amount and urgent level of each item, and share your shopping list within a group (family, friend, etc). A household goes through tons of “consumables”: food, toilet paper, laundry detergent, you name it. It is a huge challenge for households to track and manage these daily needs. Though various household members are moving around the city all day — and could potentially make efficient on-the-way purchases — in reality, no one knows or can remember what needs to be purchased and who is supposed to purchase it. Which means wasted time, extra trips to the store for one item, and general frustration about eating dry cereal, washing your hair with facial soap, and wiping your bottom with paper towels. We’ve all been there. Or worse yet, multiple people remember to buy and you end up with 400 rolls of toilet paper. iBuy will solve this problem forever. Source Code Updates2017.11.15 Version 1.0 Final product delievery Demo Register.png AddItem1.png AddItem2.png ShoppingList.png Account.png Group.png Copyright.png","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.david916.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://blog.david916.com/tags/Android/"}]},{"title":"Anagram Game","slug":"Anagram Game","date":"2017-10-11T02:11:00.000Z","updated":"2020-07-20T16:14:32.045Z","comments":true,"path":"2017/10/11/Anagram Game/","link":"","permalink":"http://blog.david916.com/2017/10/11/Anagram Game/","excerpt":"","text":"IntroductionThis is the course project of CS 399 Moblie Application Development. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, the word anagram can be rearranged into nag a ram, or the word binary into brainy or the word adobe into abode. This android game has 3 different difficulty levels. The game will provide a word and the player will need to enter the correct anagram in order to continue the game. The length of the word will increase with the difficulty of the game. Once the players finish all questions, the game will show a result page with info like the correct rate. Source Code Updates2017.10.10 Version 1.0 Designed and implemented the UI of the game Implemented the game logic and a questions library. Demo main.jpg game.png info.png","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.david916.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://blog.david916.com/tags/Android/"}]},{"title":"Android Calculator App","slug":"Android Calculator App","date":"2017-10-10T02:10:00.000Z","updated":"2020-07-20T15:13:18.768Z","comments":true,"path":"2017/10/10/Android Calculator App/","link":"","permalink":"http://blog.david916.com/2017/10/10/Android Calculator App/","excerpt":"","text":"IntroductionThis is the course project of CS 399 Moblie Application Development. The goal of this project is to develop a calculator android application that provides basic calculation functions like add, subtract, multiply, divide, square root, and percentage. The app has a simple user interface and sounds effect when users click on the button. When first we start to design this app, we try to use the GridLayout to implement the UI of this application. But the problem is the GridLayout in Android is kind of a new thing, which only supports the larger size of the screens. While we try to implement this in a smaller size screen, all of the components went outside of the screen and there is no solution on the internet to solve this problem. Finally, after some research, we decide to use the Tablelayout, which is more flexible to different kinds of devices and reduces the complication of the UI code. It is also flexible in both vertical and landscape views. The whole color design is inspired by the calculator design of the iOS original calculator application. For the division function, it requires the second parameter not to be 0, otherwise, it will throw an error and play the error sound. Another issue is to keep the calculation continuously while we keep pressing the operator button after we got a result. When we first calculate a result, we will store it into a variable and use it as the first parameter of the next calculation. Besides, due to the different sizes of the screens of the devices, we had to limit the digits of the number less than 10. If the digits of the calculation result are greater than 10, we will use the scientific notation to represent the result. APK DownloadSource Code Updates2017.10.10 Version 1.0 Designed and implemented the user interface of the calculator app Developed the calculator function, such as addition, substraction, multiplication and division. Demo","categories":[{"name":"Projects","slug":"Projects","permalink":"http://blog.david916.com/categories/Projects/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://blog.david916.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://blog.david916.com/tags/Android/"}]}]}